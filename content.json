{"meta":{"title":"吾将上下而求索","subtitle":"Keep young, keep on","description":"Ian's place to write","author":"Ian Wang","url":"http://example.com","root":"/"},"pages":[{"title":"","date":"2021-02-13T22:50:33.860Z","updated":"2021-02-13T22:50:33.860Z","comments":true,"path":"404/index.html","permalink":"http://example.com/404/index.html","excerpt":"","text":"404"},{"title":"categories","date":"2021-02-13T21:05:14.000Z","updated":"2021-02-13T22:50:04.322Z","comments":false,"path":"categories/index.html","permalink":"http://example.com/categories/index.html","excerpt":"","text":""},{"title":"about","date":"2021-02-13T21:44:37.000Z","updated":"2021-02-14T02:51:01.905Z","comments":true,"path":"about/index.html","permalink":"http://example.com/about/index.html","excerpt":"","text":"About meHi, I work as a software engineer for a company at Nvidia. I earned a PhD degree from University of New Mexico, US. in electrical engineering. Go Lobos! BackgroundsMy studied computational Electromagtic with prof. Zhen Peng and prof. Christos Christodoulou. My research touches on parallel computing and numerical partial differential equation. Before my PhD career, I studied optics for 7 years. I enjoyed Playing guitar is my art of self-amusement. I believe in rational thinking and mathematics. What this blog is about?This blog aims to keep record of what I am/was thinking in all aspects, either technically or mentally. Keep learning and never-stop thinking are what I believe always. Communication is another hugh issue. Hope you like it. The old site is found here."},{"title":"All tags","date":"2021-02-13T21:44:43.000Z","updated":"2021-02-13T22:49:47.541Z","comments":false,"path":"tags/index.html","permalink":"http://example.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"What does std::move do at parameter binding?","slug":"2022-01-23-what does stdmove do","date":"2022-01-23T06:00:00.000Z","updated":"2022-01-23T20:09:01.481Z","comments":true,"path":"programming/2022-01-23-what does stdmove do.html","link":"","permalink":"http://example.com/programming/2022-01-23-what%20does%20stdmove%20do.html","excerpt":"std::move is the signature feature of c++11 and often used in resource management so called RAII(resource acquisition is initialization). In this post, we just focus on 1 scenario that appears frequently in factory mode and demonstrate how compiler treats it at parameter binding.","text":"std::move is the signature feature of c++11 and often used in resource management so called RAII(resource acquisition is initialization). In this post, we just focus on 1 scenario that appears frequently in factory mode and demonstrate how compiler treats it at parameter binding. Some term clarification: 123void foo(int p1);int a &#x3D; 1;foo(a); we refer p1 as parameter and a as argument of foo. Say we have a resource class as 1Struct Resource &#123;&#125;; and a handle class to hold the resource as, 1234567891011121314151617181920212223242526class handle &#123; public: handle () &#123; res = new Resource(); &#125; ~handle () &#123; if (res) delete res; &#125; handle (const handle &amp; other)&#123; cout &lt;&lt; &quot;copy constructor&quot; &lt;&lt; endl; cout&lt;&lt;&quot;At entrance: other.res=&quot;&lt;&lt;other.res&lt;&lt;endl; res = new Resource(*other.res); cout&lt;&lt;&quot;I am set to=&quot;&lt;&lt;res&lt;&lt;endl; &#125; handle (handle &amp;&amp; other) &#123; cout &lt;&lt; &quot;move constructor&quot; &lt;&lt; endl; res = other.res; other.res = nullptr; &#125; handle &amp; operator=(handle &amp;&amp; other)&#123; cout &lt;&lt; &quot;move assignment&quot; &lt;&lt; endl; std::swap(res, other.res); return *this; &#125; Resource* get_res() const &#123; return res; &#125; private: Resource* res;&#125;; Then we need a wrapper class as an aggregate of couple of handles like this 123456789101112class wrapper&#123; public: wrapper(handle &amp;&amp;handle) : _handle_1(std::move(handle)) &#123; cout&lt;&lt;&quot;private member holds resource &quot;&lt;&lt;_handle_1.get_res()&lt;&lt;&quot;; parameter holds &quot; &lt;&lt; handle.get_res()&lt;&lt;endl;&#125; handle* get_handle() &#123;return &amp;_handle_1;&#125; wrapper(wrapper&amp;&amp; x) = default; private: handle _handle_1;&#125;; Assume there is a user case where the ownership needs to be passed around. 12345handle h4;cout &lt;&lt;&quot;h4 res&#x3D;&quot;&lt;&lt;h4.get_res()&lt;&lt;endl;unique_ptr&lt;wrapper&gt; m(new wrapper(std::move(h4)));cout &lt;&lt;&quot;h4 res&#x3D;&quot;&lt;&lt;h4.get_res()&lt;&lt;endl;cout &lt;&lt;&quot;m res&#x3D;&quot;&lt;&lt;instance-&gt;get_holder()-&gt;get_res()&lt;&lt;endl; It’s nearly a common ground that we need to use std::move(h4) as argument to construct wrapper(), but the key is how to write the initialization list of the constructor for class wrapper. We have the following 4 cases. wrapper(handle &amp;&amp;handle) : _handle_1(std::move(handle)) wrapper(handle &amp;&amp;handle) : _handle_1(handle) wrapper(handle handle) : _handle_1(std::move(handle)) wrapper(handle handle) : _handle_1(handle) // output #1 h4 res=0x55fbc9929eb0 move constructor private member holds resource 0x55fbc9929eb0; parameter holds 0 h4 res=0 m res=0x55fbc9929eb0 Success! It&#39;s what we want and only 1 move constructor is called. The compiler it smart enough to `swap(h4, _handl_1)`. // output #2 h4 res=0x564af9158eb0 copy constructor At entrance: other.res=0x564af9158eb0 I am set to=0x564af9159300 private member holds resource 0x564af9159300; parameter holds 0x564af9158eb0 h4 res=0x564af9158eb0 m res=0x564af9159300 Failure. No move at all because we never mean to `move` explicitly inside wrapper. Parameter handle is a lvalue though itself is a rvalue reference. No wonder class handle invokes its copy constructor. So std::move(handle) is indispensable. Luckily, `h4` is not tampered and `h4-&gt;temp` is skipped or optimized by compiler. With std::forward() syntex, perfect forwarding, we can preserve the qualifiers (const-ref, ref, value, rvalue, etc.). of parameter and will be discusssed in another post. // output #3 h4 res=0x555ca6e7ceb0 move constructor move constructor private member holds resource 0x555ca6e7ceb0; parameter holds 0 h4 res=0 m res=0x555ca6e7ceb0 Success! But 2 moves. Interestingly, no copy constructor! `h4-&gt;temp-&gt;_handle_1` // output #4 h4 res=0x56100474deb0 move constructor copy constructor At entrance: other.res=0x56100474deb0 I am set to=0x56100474e300 private member holds resource 0x56100474e300; parameter holds 0x56100474deb0 h4 res=0 m res=0x56100474e300 Failure. Really bad because `h4-&gt;temp` and gets lost! Based on analysis above, I would actually recommend case 3 over 1 though one more time of move. Reason is case 3 is more general in which case the input argument can be rvalue or lvalue. Moreover, move is implemented by swap under the hood(usually) thus not too much overheads.","categories":[{"name":"programming","slug":"programming","permalink":"http://example.com/categories/programming/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://example.com/tags/c/"}]},{"title":"How to achieve Inter-cta sync on Nvidia GPU","slug":"inter-cta-sync","date":"2021-02-14T02:54:17.595Z","updated":"2021-02-16T04:31:49.525Z","comments":true,"path":"GPU/inter-cta-sync.html","link":"","permalink":"http://example.com/GPU/inter-cta-sync.html","excerpt":"Background In many deep learning and scientific applications, inter-CTA-sync is a necessary pattern. Buteven with CUDA9’s new feature coperative launch, inter-CTA-sync is never trivial. This blog will dive into this topic with a reduction as our model. Say we need to perform a reduction over a entire grid of threads and a natural idea is to reduce intra-block first and inter-block as a second step, so called two-step protocal. It is the best version in terms of performance and comprehensibility. The second step is what need to pay attention to because other blocks have to consume data my block produced in a safe way(Producer-Consumer model). Sure, two kernel launch can be a kill but not in our scope.","text":"Background In many deep learning and scientific applications, inter-CTA-sync is a necessary pattern. Buteven with CUDA9’s new feature coperative launch, inter-CTA-sync is never trivial. This blog will dive into this topic with a reduction as our model. Say we need to perform a reduction over a entire grid of threads and a natural idea is to reduce intra-block first and inter-block as a second step, so called two-step protocal. It is the best version in terms of performance and comprehensibility. The second step is what need to pay attention to because other blocks have to consume data my block produced in a safe way(Producer-Consumer model). Sure, two kernel launch can be a kill but not in our scope. Sample code123456789101112131415161718192021222324252627282930313233343536373839404142434445__device__ int count&#x3D;0; __global__ static void sum(int* data_gpu,int* block_gpu,int *sum_gpu,int length)&#123; extern __shared__ int blocksum[]; __shared__ int islast; int offset; const int tid&#x3D;threadIdx.x; const int bid&#x3D;blockIdx.x; blocksum[tid]&#x3D;0; for(int i&#x3D;bid*THREAD_NUM+tid;i&lt;length;i+&#x3D;BLOCK_NUM*THREAD_NUM) blocksum[tid]+&#x3D;data_gpu[i]; __syncthreads(); offset&#x3D;THREAD_NUM&#x2F;2; while(offset&gt;0) &#123; if(tid&lt;offset) blocksum[tid]+&#x3D;blocksum[tid+offset]; offset&gt;&gt;&#x3D;1; __syncthreads(); &#125; if(tid&#x3D;&#x3D;0) &#123; block_gpu[bid]&#x3D;blocksum[0]; __threadfence(); int value&#x3D;atomicAdd(&amp;count,1); islast&#x3D;(value&#x3D;&#x3D;gridDim.x-1); &#125; __syncthreads(); if(islast) &#123; if(tid&#x3D;&#x3D;0) &#123; int s&#x3D;0; for(int i&#x3D;0;i&lt;BLOCK_NUM;i++) s+&#x3D;block_gpu[i]; *sum_gpu&#x3D;s; &#125; &#125;&#125; The one-step reduction procedure presented in this section is mainly an example to show you how you can use the data generated by one or more other threads during the execution of one kernel, one or more threads. Let’s start with threadfence. First, threadfence has two main roles, and three levels of control: one role is to control the validity of accesses (writes only). The other is to control that the compiler does not over-optimize (for reads and writes) the top and bottom of the fence (from a line-of-code perspective) when generating instructions. This is actually a combination of hardware and software, the former being mainly hardware, the latter being mainly software (compiler behavior control). Let’s start with threadfence’s control of memory writes. It has a detail that is not specified here: it can suspend the thread (warp) that calls it for a certain period of time until the access writes made by that thread (warp) have reached a certain level. Then the execution of the thread (warp) can be resumed. That is, at what level of completion for the partner thread in the block, for other threads on the GPU, or globally (e.g., the CPU or other cards participating in P2P Access), as described in this section. This leads to the 3 levels of threadfence functions with different suffixes in this section: 123__threadfence_block();__threadfence();__threadfence_system(); Each of these three levels is higher than the other. When used, it causes threads (warp) to be suspended for longer and longer periods of time (suspension does not necessarily have a negative performance impact. This is because the hardware can choose to switch to another thread or warp during this time, which means it can be masked). If we look at it from the hardware point of view only, after the thread executes the instructions written by the access (generated by the compiler), it will continue to execute without the 3 functions (the corresponding instructions generated), and not wait for the access to complete. From a hardware perspective, if a thread executes the access-written instructions (generated by the compiler) without these three functions (generated instructions), it will continue to execute without waiting for the access to complete. With these three instructions, the thread will pause and wait for the writing process to complete to a point where it can be “seen” by other threads at different levels before continuing. This is why I emphasized that this is a write in the “control access (write)” brackets. This is because for reads, you can automatically wait when an operand is used. However, the write does not have this function. After the data (from the register) and the access instruction are submitted to the LSU in the SM, that is, after the access instruction is successfully issued, the thread continues to execute. These three functions, on the other hand, effectively introduce three different levels of delay, allowing multiple hardware pipelines to continue execution only after a certain level of write operation has been completed. This is useful in many scenarios (e.g. the example at the end of this chapter where a thread in a block reads data generated by a thread in another block). There is no information on how long this causes threads/warp to pause. One interesting thing is that, when a certain computational power card has a time error at a certain level of the instruction, then the compiler does a patch operation when generating a specific level of the pause instruction for that particular computational power card. (Two instructions are generated in a row to fix the worst-case timing problem and ensure that the write operation is executed properly somewhere).And that’s not all, we all know that hardware can’t leave software, otherwise it’s a soulless corpse. Not only does the hardware have certain operations on the threadfence family of functions (the corresponding instructions), but the compiler, when encountering the three functions, besides generating the three corresponding instructions normally, also causes some behavioral changes: this is what the previous text said, causing some changes in the optimization behavior, which is also described in this section. In layman’s terms, this means separating the accesses before and after the threadfence family of functions,The compiler will not cross the threadfence boundary and reorder the access statements,to optimize performance while maintaining safety and logical correctness. This is why there are a lot of repetitive long sentences in this section.The other part of the long sentence, which says, “A thread’s …. The write operation …. When and where it can be observed by whom (3 levels)…” is a change in the compiler’s behavior, plus a pause in control due to the 3 different instructions generated by the hardware. These are the two main points of threadfence. The user should see for himself the three levels. As mentioned before, the main difference is the pause time (not from official sources, from actual observation).But these two points are not all, this chapter also talks about a volatile keyword.It also happens to have two roles. It is also used in software and hardware. In the example at the end of this chapter, this keyword is indispensable. The software role is similar to that of the threadfence function, where compiler control and changes in behavior occur: this is actually familiar to everyone.The compiler will not use an old value that already exists, such as a fixed p[offset] that has already been read. Instead, it generates a new access instruction to read it. The other point is hardware, as we all know that current cards (e.g. Pascal, GTX1080 with 6.1 computing power), have a uniform (logical) L2 cache, and a separate L1 cache for each SM. (also called unified cache in this computing power, may be different in other computing power, here unified cache), that is, the card has 1 L2 cache (in GPU), and 20 independent L1 cache (in each SM), once SM 10 Once SM 10 writes a value, changing the content of its L1 cache and/or global L2 cache (to the value just written), SM 9, if it still reads the normal access memory, may get the old content in SM 9’s L1 cache directly because it was there before, immediately. At this point, with the volatile keyword, the compiler will not only not use the case mentioned in point (1), but will issue a new access after the encounter, and will also control the cache control policy of the access instruction so that it can pass over the old value in the L1 of the current SM, to get the correct result. In other words, some cards with multiple L1s and unified L2s do not maintain consistency under certain circumstances. This is about volatile.Then let’s talk about this example. This example is a simplified version, and some details have been removed. But it is still sufficient as an example here. If users want to see the full version, there are many online. From NV, from different authors. You can refer to it when the time comes. Let me start with the important point: the mix of normal access and atomic operations. First of all, as we said before, this is a single-step statute summing kernel. It only takes one kernel start, to find the final sum in parallel for a large amount of data on a buffer (a statute operation is a process that takes a large range of inputs and gives a small range of outputs, you can also think of it as a shadowing process from a large set to a small set). You can also think of it as a projection from a large set to a small set). Of course, this example is just a simple summation. Since the kernel only wants to do all the operations in one boot, the code is split into two parts, the first part is just the normal summation of the respective blocks, and then saved to the explicit memory. The second part is the last block elected, which does the second step, reading the internal sums of the previous blocks, and then finding the final sum. This completes the global summation of the single kernel. Because here involves, read the results of other threads, so use the previously mentioned volatile + threadfence, but here the threadfence also has an important role, is the common common access (result[…]) = … write) and atomic access (atomInc). There is no completion order between the normal access instruction and the atomic instruction. By inserting a threadfence function between the two instructions, this code causes all previously terminated kernels to run through the atomic operation only when they have paused long enough for the written part to be globally visible and successfully validated. This allows the final block to be read as soon as the result of the atomic operation is available (a successful election). This prevents a subsequent atomic operation from completing while the previous normal access (which holds the sum of the parts) is still on its way. That’s the main caveat here.It is also important to note that there are two other versions of this common statute summation. Version 2 requires two kernel boots, but the code is much simpler. Version 2 of the kernel only internally calculates its own partial sum for each block, and saves its own partial sum (not written here, there are plenty of forums for that), which means that version 2 of the kernel only needs the first half of version 1 of the kernel. The second half is not needed. Then, by a simple trick (booting it twice in a row), the second boot only needs to set 1 block. This version of the code is simple (only half of it), and circumvents the threadfence operation, the atomInc operation, and the process of controlling the scope of the atomic operation inside the block here with an if (which is performed once collectively) and then broadcasting the result back in shared memory. This simplifies things considerably, but often results in better performance. So code 2 is highly recommended (the only thing you have to pay for is to boot the kernel twice. But the kernel itself has been greatly simplified)","categories":[{"name":"GPU","slug":"GPU","permalink":"http://example.com/categories/GPU/"}],"tags":[{"name":"parallel computing","slug":"parallel-computing","permalink":"http://example.com/tags/parallel-computing/"}]},{"title":"HEXO Advanced","slug":"2016-06-12-HEXO_Advanced","date":"2021-02-13T23:10:49.349Z","updated":"2021-02-16T04:56:47.679Z","comments":true,"path":"uncategorized/2016-06-12-HEXO_Advanced.html","link":"","permalink":"http://example.com/uncategorized/2016-06-12-HEXO_Advanced.html","excerpt":"HEXO接近是最近有一些朋友提出的问题，然后我做了总结，如果你也在使用HEXO，不妨看看，应该会有些帮助。 1、博客部署样式出问题了怎么办？ 2、电脑重装或者误删了本地博客怎么办？ 3、想使用两台电脑写博客怎么办？ 4、为何使用百度搜不到我的博客？","text":"HEXO接近是最近有一些朋友提出的问题，然后我做了总结，如果你也在使用HEXO，不妨看看，应该会有些帮助。 1、博客部署样式出问题了怎么办？ 2、电脑重装或者误删了本地博客怎么办？ 3、想使用两台电脑写博客怎么办？ 4、为何使用百度搜不到我的博客？ 使用Jekyll解决前三个问题。不得不说 Jekyll 确实可以解决我上面三个问题, 因为 Jekyll 是直接把Markdown格式的文章直接放在github仓库里的, 相当于直接用git来管理博客了, Github 官方也很推荐 Jekyll 。 你可以先看下 Jekyll 搭建博客的voyagelab, github地址, 当然了这只是很普通的, Jekyll 也有很多主题可以选择的, 更详细的请看Jekyll中文文档、Jekyll英文文档、Jekyll主题列表。在 Jekyll 上逛了一个星期的我又回到了 Hexo , 发现 目前 Jekyll 对主题和一些插件的支持相对 Hexo 来说, 没那么友好, 可能有一些其它的方法只是我没找到而已,关于 Jekyll 搭建博客就介绍到这, 如果有问题的话可以评论, 或者联系我。 使用Hexo解决上面前三个问题是的, 我大Hexo同样可以解决上面三个问题, 那就是使用git。关于如何使用 Hexo 搭建博客请看我另一篇文章HEXO搭建个人博客, 如果搭建的过程中出现了问题, 我们可以交流交流。现在我假设你已经能基本使用 Hexo 了, 接下来就看看如何来管理博客。 使用git管理博客Blog-Growing是我管理博客的仓库地址。结构大致是: – Blog-Growing |– .git |– .gitignore |– Hexo | .. | .. | 整个博客的配置信息 你可以把我的的Blog-Growing clone下来, 看看一些基本配置是怎么配置的。需要提醒的是, 要把主题下的.git给删除掉 , 当然了你也可以使用 git submodule 来管理, 具体的管理方法我这里就不做多的介绍了, 想了解的话可以私信我。上面的过程基本做完后, 怎么来解决我开篇提的前三个问题了。 具体实现:一：家里电脑使用博客 建立git远端仓库管理博客,并使用家里的电脑把本地博客的配置推送到远端仓库。二：公司电脑使用博客 到了公司只需要执行sudo npm install -g hexo,然后cd到你的博客目录下,如我cd 到Hexo目录下, 然后执行 hexo server 就可以在本地预览博客了。三：使用Git保存 修改好博客后记得先使用git来提交下, 即使下次把博客的样式修改坏了, 也可以使用 git reset --hard 来回退。如: 我cd 到 Blog-Growing 目录下使用git提交。四：博客提交 1、修改好的博客使用 hexo d 展示到博客页上。 2、git push 整个本地博客。 提示: 在这里 git 仅仅只是用户做博客的版本管理的, 博客的样式修改、基本部署还是使用 hexo 来操作的。 让百度能搜索到你的博客为什么要使用百度搜索？ 有人可能会说作为一个开发人员, 你不会用 Google 啊。 是的, Google是能搜到我们搭建在 Github Page 的博客, 会用Google 也是一个开发人员必备技能之一。但是, 我们生活在天朝, 所以百度还是总有会用到的时候, 或者是你想让更多的天朝人能搜到你。 为什么使用百度搜索不到 Github Page 上的博客？有人联系过 Github Support 部门 , 给出大致的意思就是: 百度爬虫爬得太猛烈，已经对很多 Github 用户造成了问题。所以 Github 将禁止百度爬虫的爬取。 如何让百度能搜索你的博客? 根据上面说的, 目前发现只是Github Page禁止了百度搜索, 所以让百度能搜索到你的博客还是有一些方法的。例如: 自己搞个VPS,博客部署在VPS上。 博客部署 Coding.net 上, GitCafe已经合并到 Coding 。我使用的是第二种方法, 博客部署在 Coding.net 上也相对简单些。 在Coding上部署你的博客。 Coding同样支持Hexo、Jekyll等博客的部署, Coding 跟Github还是挺像的,而且是中文。 同样的在Coding里面建一个项目,项目名字跟你的用户名一样,这里我就不啰嗦了, 说几个需要注意的地方:注意一: 在Coding Page 上部署博客,需要把博客推送到coding-pages 分支上, 分支名字是固定的。注意二: Coding Page 不支持自定义CNAME, 你需要点击到Page模块,然后添加一个域名来绑定。 更详细的请看Coding Pages 官网介绍. 参考文章:解决 Github Pages 禁止百度爬虫的方法与可行性分析 转载请注明：潘柏信的博客 » 点击阅读原文","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]},{"title":"Deterministic-random-shuffle","slug":"2020-10-14-Deterministic-random-shuffle","date":"2020-10-14T05:00:00.000Z","updated":"2021-02-14T02:47:36.597Z","comments":true,"path":"Deep-Learning/2020-10-14-Deterministic-random-shuffle.html","link":"","permalink":"http://example.com/Deep-Learning/2020-10-14-Deterministic-random-shuffle.html","excerpt":"MotivationDeterminism is a important issue in deep learning(DL) though a lot of randomness is burried here and there, e.g. initialization of weights It’s actually easier to understand in TF1.x language, purely graph mode. This link is highly recommended. TF2.x introduces eager mode but still keeps graph mode option by all sorts of means, e.g. tf.function. It’s explained here but to be honest way more counterintuitive. This post aims to list couple of senarios may trip you down when playing around with such concepts.","text":"MotivationDeterminism is a important issue in deep learning(DL) though a lot of randomness is burried here and there, e.g. initialization of weights It’s actually easier to understand in TF1.x language, purely graph mode. This link is highly recommended. TF2.x introduces eager mode but still keeps graph mode option by all sorts of means, e.g. tf.function. It’s explained here but to be honest way more counterintuitive. This post aims to list couple of senarios may trip you down when playing around with such concepts. Problem statementDeterminism means, in most cases, the identical results among many runs. A common approach is tf.random.set_seed(SEED) at the entry point of your code. To be frank, there is a lot of implications going on under the hood, but essentially it will achieve repeatable results. I am actually assuming all the ops(on CPU and GPU) are deterministic, but in fact NOT! Check here. This post will focus on another case: without running the program twice, can we get a repeatable results, if a op under test is executed in a loop many times. A substantial example would be 1) identical dropout between batches or epochs; 2) same order of shuffle of input data. For simplicity, the latter will be looked at. All the codes are based on TF2.x. Graph mode123456789101112131415161718@tf.functiondef shuffled_sum(input_val, seed&#x3D;123): print(&quot;Python run&quot;) tf.random.set_seed(seed) tensorValue1 &#x3D; tf.random.shuffle(input_val, seed) tf.print(tensorValue1) tensorValue2 &#x3D; tf.random.shuffle(input_val, seed) tf.print(tensorValue2)shuffled_sum([1,2,3,4,5,6,7,8,9,10]) # run-1shuffled_sum([1,2,3,4,5,6,7,8,9,10]) # run-2## output:Python run[8 7 3 ... 9 1 10] ---A[8 7 3 ... 9 1 10] ---B[6 8 10 ... 4 1 7] ---C[6 8 10 ... 4 1 7] ---D The intention of shuffled_sum was to set the seed as much as it can to achieve repeatable results. But why we didn’t see A==C? A: TF’s builds the graph first and find that input argument seed is not related to tensorValue1 and tensorValue2. In run-2, the global seed is not seen for the shuffle op. The internal counter for shuffle op increments. For A==B , the two ops takes in the same input args, so TF regards them as identical. Eager modeThis time, we comments out tf.funciton,and see the output as 1234567## output:Python run[8 7 3 ... 9 1 10] ---A[6 8 10 ... 4 1 7] ---BPython run[8 7 3 ... 9 1 10] ---C[6 8 10 ... 4 1 7] ---D Now A==C reals the global seed works. But A!=B means that B is the next sequence of A given the seeds combination and it’s deterministic. In eager mode, the shuffle simply runs twice(counter increments) in the function. How to enforce repeatability in graph mode?12345678shuffled_sum([1,2,3,4,5,6,7,8,9,10])tf.random.set_seed(123)shuffled_sum([1,2,3,4,5,6,7,8,9,10])## output:[8 7 3 ... 9 1 10][8 7 3 ... 9 1 10][8 7 3 ... 9 1 10][8 7 3 ... 9 1 10] ‘tf.random.set_seed(123)’ have to be run before gets into run-2 so it cannot fall into a graph. In TF1.x way, it should comes before session.run(xxx).","categories":[{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://example.com/categories/Deep-Learning/"}],"tags":[{"name":"Randomness","slug":"Randomness","permalink":"http://example.com/tags/Randomness/"},{"name":"Determinism","slug":"Determinism","permalink":"http://example.com/tags/Determinism/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://example.com/tags/Tensorflow/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://example.com/tags/Deep-Learning/"},{"name":"eager execution","slug":"eager-execution","permalink":"http://example.com/tags/eager-execution/"}]},{"title":"Useful docker commands","slug":"2020-10-08-Useful-docker-commands","date":"2020-10-08T04:06:57.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Useful-docker-commands.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Useful-docker-commands.html","excerpt":"","text":"123456789 ~/.bash_aliases# kill all running containersalias dockerkill=&#x27;docker kill $(docker ps -a -q)&#x27;# delelte all stopped containersalias dockercleanc=&#x27;docker rm $(docker ps -a -q)&#x27;# delete all untaged imagesalias dockercleani=&#x27;docker rmi $(docker images -q -f dangling=true)&#x27; # delte all stopped and untaged imagesalias dockerclean=&#x27;dockercleanc || true &amp;&amp; dockercleani&#x27;","categories":[],"tags":[{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"}]},{"title":"Domain Decomposition Method for Elliptic PDEs","slug":"2020-10-08-DDM-elliptic","date":"2020-10-06T03:30:08.000Z","updated":"2021-02-14T02:44:36.715Z","comments":true,"path":"Math/2020-10-08-DDM-elliptic.html","link":"","permalink":"http://example.com/Math/2020-10-08-DDM-elliptic.html","excerpt":"","text":"What is this?This is a brief introduction to domain decomposition method(DDM) for MATH576 at UNM. The report can be found here.","categories":[{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"}],"tags":[{"name":"domain-Decomposition","slug":"domain-Decomposition","permalink":"http://example.com/tags/domain-Decomposition/"}]},{"title":"ParaReal-heat","slug":"2020-10-08-ParaReal-heat","date":"2020-10-06T03:29:42.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-ParaReal-heat.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-ParaReal-heat.html","excerpt":"","text":"What is this?This project implements a Parallel-in-Time(PIT) algorithm, ParaReal for heat equation with hybrid OpenMP and MPI.","categories":[],"tags":[{"name":"parallel computing","slug":"parallel-computing","permalink":"http://example.com/tags/parallel-computing/"},{"name":"ParaReal","slug":"ParaReal","permalink":"http://example.com/tags/ParaReal/"},{"name":"PIT","slug":"PIT","permalink":"http://example.com/tags/PIT/"},{"name":"roofline model","slug":"roofline-model","permalink":"http://example.com/tags/roofline-model/"}]},{"title":"Machine Learning","slug":"2020-10-08-Maching-learning","date":"2020-10-06T03:29:05.000Z","updated":"2021-02-14T02:43:25.613Z","comments":true,"path":"Machine-Learning/2020-10-08-Maching-learning.html","link":"","permalink":"http://example.com/Machine-Learning/2020-10-08-Maching-learning.html","excerpt":"","text":"What is this?This is a series of course projects for Machine Learning at UNM. For the topics, please refer to the following table. Topic Keywords Kernel Tricks for Regrssion Problems Kernel Methods, Ridge Regression, Support Vector Machine, Classification Support Vector Machine for Classification and Regression SVM, Structural risk, Classification, Regression Hidden Markov Models Hidden Markov Model, Markov Model, Latent Variable, Markov Process Latent Linear Models: PCA and ICA Latent Linear Model, PCA, PPCA, ICA, FastICA, EM, Factor Analysis Clustering with Gaussian Mixture Models and K-Means EM, Gaussian Mixture Models, K-means","categories":[{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://example.com/categories/Machine-Learning/"}],"tags":[{"name":"machine learning","slug":"machine-learning","permalink":"http://example.com/tags/machine-learning/"},{"name":"HMM","slug":"HMM","permalink":"http://example.com/tags/HMM/"},{"name":"SVM","slug":"SVM","permalink":"http://example.com/tags/SVM/"},{"name":"PCA","slug":"PCA","permalink":"http://example.com/tags/PCA/"},{"name":"ICA","slug":"ICA","permalink":"http://example.com/tags/ICA/"},{"name":"GMM","slug":"GMM","permalink":"http://example.com/tags/GMM/"},{"name":"EM","slug":"EM","permalink":"http://example.com/tags/EM/"}]},{"title":"Convex-beamforming","slug":"2020-10-08-Convex-beamforming","date":"2020-10-06T03:28:11.000Z","updated":"2021-02-14T02:44:51.005Z","comments":true,"path":"Math/2020-10-08-Convex-beamforming.html","link":"","permalink":"http://example.com/Math/2020-10-08-Convex-beamforming.html","excerpt":"","text":"What is this?In this report, a robust beaming forming problem is analyzed and formulated into second order cone programming. The numerical method will be studied and compared with traditional ones.","categories":[{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"}],"tags":[{"name":"convex optimization","slug":"convex-optimization","permalink":"http://example.com/tags/convex-optimization/"},{"name":"beamforming","slug":"beamforming","permalink":"http://example.com/tags/beamforming/"},{"name":"SOCP","slug":"SOCP","permalink":"http://example.com/tags/SOCP/"}]},{"title":"Least-square-FEM","slug":"2020-10-08-Least-square-FEM","date":"2020-10-06T03:27:27.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Least-square-FEM.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Least-square-FEM.html","excerpt":"","text":"What is this?This is a course project for MATH578 at UNM. This project discusses the use of Least-square FEM to stabilize numerical solution of convection-diffusion equation. The report can be found here.","categories":[],"tags":[{"name":"least-square","slug":"least-square","permalink":"http://example.com/tags/least-square/"},{"name":"finite element method","slug":"finite-element-method","permalink":"http://example.com/tags/finite-element-method/"}]},{"title":"Markdown-cheatsheet","slug":"2020-10-08-Markdown-cheatsheet","date":"2020-10-05T04:30:42.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Markdown-cheatsheet.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Markdown-cheatsheet.html","excerpt":"Markdown Cheatsheet Heading 1Markup : # Heading 1 # -OR- Markup : ============= (below H1 text)","text":"Markdown Cheatsheet Heading 1Markup : # Heading 1 # -OR- Markup : ============= (below H1 text) Heading 2Markup : ## Heading 2 ## -OR- Markup: --------------- (below H2 text) Heading 3Markup : ### Heading 3 ### Heading 4Markup : #### Heading 4 #### Common text Markup : Common text Emphasized text Markup : _Emphasized text_ or *Emphasized text* Strikethrough text Markup : ~~Strikethrough text~~ Strong text Markup : __Strong text__ or **Strong text** Strong emphasized text Markup : ___Strong emphasized text___ or ***Strong emphasized text*** Named Link and http://www.google.fr/ or http://example.com/ Markup : [Named Link](http://www.google.fr/ &quot;Named link title&quot;) and http://www.google.fr/ or &lt;http://example.com/&gt; heading-1 Markup: [heading-1](#heading-1 &quot;Goto heading-1&quot;) Table, like this one : First Header Second Header Content Cell Content Cell Content Cell Content Cell 1234First Header | Second Header------------- | -------------Content Cell | Content CellContent Cell | Content Cell Adding a pipe | in a cell : First Header Second Header Content Cell Content Cell Content Cell | 1234First Header | Second Header------------- | -------------Content Cell | Content CellContent Cell | \\| code() Markup : `code()` 1234567891011121314var specificLanguage_code = &#123; &quot;data&quot;: &#123; &quot;lookedUpPlatform&quot;: 1, &quot;query&quot;: &quot;Kasabian+Test+Transmission&quot;, &quot;lookedUpItem&quot;: &#123; &quot;name&quot;: &quot;Test Transmission&quot;, &quot;artist&quot;: &quot;Kasabian&quot;, &quot;album&quot;: &quot;Kasabian&quot;, &quot;picture&quot;: null, &quot;link&quot;: &quot;http://open.spotify.com/track/5jhJur5n4fasblLSCOcrTp&quot; &#125; &#125;&#125; Markup : ```javascript 12345678910111213141516171819202122232425262728293031323334353637383940414243444546474849505152535455565758596061626364656667686970717273747576777879808182838485* Bullet list * Nested bullet * Sub-nested bullet etc* Bullet list item 2~~~ Markup : * Bullet list * Nested bullet * Sub-nested bullet etc * Bullet list item 2-OR- Markup : - Bullet list - Nested bullet - Sub-nested bullet etc - Bullet list item 2 ~~~1. A numbered list 1. A nested numbered list 2. Which is numbered2. Which is numbered~~~ Markup : 1. A numbered list 1. A nested numbered list 2. Which is numbered 2. Which is numbered~~~- [ ] An uncompleted task- [x] A completed task~~~ Markup : - [ ] An uncompleted task - [x] A completed task~~~- [ ] An uncompleted task - [ ] A subtask~~~ Markup : - [ ] An uncompleted task - [ ] A subtask~~~&gt; Blockquote&gt;&gt; &gt; Nested blockquote Markup : &gt; Blockquote &gt;&gt; Nested Blockquote_Horizontal line :_- - - - Markup : - - - -_Image with alt :_![picture alt](http:&#x2F;&#x2F;via.placeholder.com&#x2F;200x150 &quot;Title is optional&quot;) Markup : ![picture alt](http:&#x2F;&#x2F;via.placeholder.com&#x2F;200x150 &quot;Title is optional&quot;)Foldable text:&lt;details&gt; &lt;summary&gt;Title 1&lt;&#x2F;summary&gt; &lt;p&gt;Content 1 Content 1 Content 1 Content 1 Content 1&lt;&#x2F;p&gt;&lt;&#x2F;details&gt;&lt;details&gt; &lt;summary&gt;Title 2&lt;&#x2F;summary&gt; &lt;p&gt;Content 2 Content 2 Content 2 Content 2 Content 2&lt;&#x2F;p&gt;&lt;&#x2F;details&gt; Markup : &lt;details&gt; &lt;summary&gt;Title 1&lt;&#x2F;summary&gt; &lt;p&gt;Content 1 Content 1 Content 1 Content 1 Content 1&lt;&#x2F;p&gt; &lt;&#x2F;details&gt;&#96;&#96;&#96;html&lt;h3&gt;HTML&lt;&#x2F;h3&gt;&lt;p&gt; Some HTML code here &lt;&#x2F;p&gt; Link to a specific part of the page: Go To TOP Markup : [text goes here](#section_name) section_title&lt;a name=&quot;section_name&quot;&gt;&lt;/a&gt; Hotkey: ⌘F ⇧⌘F Markup : &lt;kbd&gt;⌘F&lt;/kbd&gt; Hotkey list: Key Symbol Option ⌥ Control ⌃ Command ⌘ Shift ⇧ Caps Lock ⇪ Tab ⇥ Esc ⎋ Power ⌽ Return ↩ Delete ⌫ Up ↑ Down ↓ Left ← Right → Emoji: :exclamation: Use emoji icons to enhance text. :+1: Look up emoji codes at emoji-cheat-sheet.com Markup : Code appears between colons :EMOJICODE:","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"How to deploy hexo blog on two machines","slug":"2020-10-08-How-to-deploy-hexo-blog-on-two-machines","date":"2020-10-05T03:04:39.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-How-to-deploy-hexo-blog-on-two-machines.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-How-to-deploy-hexo-blog-on-two-machines.html","excerpt":"Why we need this?Yes, Hexo is able to deploy with npm install hexo-deployer-git --save for us by simply setting up _config.yml file. It looks like normally:","text":"Why we need this?Yes, Hexo is able to deploy with npm install hexo-deployer-git --save for us by simply setting up _config.yml file. It looks like normally: 1234deploy: type: git repository: git@github.com:username&#x2F;username.github.io.git branch: master Once you push to master branch, github stores the static webpage files instead of source file. Among all files it pushes, there is one .deploy_git which records how hexo tracks remote master branches. On computer 2, git clone only pull down the static webpage files instead of source files. So you need a branch to keep source files. About blogging with HexoCheck here! How? On computer 1’s source file folder, you may checkout a new local branch hexo Let it track to remote’s hexo branch. 1git branch --set-upstream-to origin&#x2F;hexo hexo Push it to remote as 1git push origin hexo Don’t forget to get rid of .git folder for your themes if they’re cloned. On compute 2, pull down only hexo branch by 1234git init &amp;&amp; git remote add origin &lt;remote_repo&gt;git fetch origin hexo:hexo &amp;&amp; git checkout hexo orgit checkout --track origin&#x2F;hexo (most recent versions of Git)or git clone -b hexo &lt;remote_repo&gt; &lt;folder_name&gt; On compute 2, pull down only hexo branch by git init &amp;&amp; git remote add origin &lt;remote_repo&gt; git fetch origin hexo:hexo &amp;&amp; git checkout hexo or git checkout --track origin/hexo (most recent versions of Git) or git clone -b hexo &lt;remote_repo&gt; .... 12345* cd into this folder, and &#96;npm install &amp; npm install hexo-deployer-git --save&#96;* write new blog, generate and deploy hexo g hexo new post &quot;post_name&quot; hexo d 123* once finished, push to remote git add source git commit -m &quot;xxxx&quot; git push","categories":[],"tags":[{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"}]},{"title":"All about floating-point numbers","slug":"2020-10-08-All-about-floating-point-numbers","date":"2020-10-03T01:57:08.000Z","updated":"2021-02-14T02:45:05.806Z","comments":true,"path":"Math/2020-10-08-All-about-floating-point-numbers.html","link":"","permalink":"http://example.com/Math/2020-10-08-All-about-floating-point-numbers.html","excerpt":"How Floating-point number are represented in IEEE-754 standardThe maximal and minimal number","text":"How Floating-point number are represented in IEEE-754 standardThe maximal and minimal number FP maximal minimal 32 1.11111111111111111111111*2^127^=3.4028234663852886e038 1.0000 0000 0000 0000 0000 001*2^-126^= 1.1754944909521339e-038 64 1.7976931348623157e308 2.2250738585072014e−308 For details please check this. Never forget the exponent bits cannot be all 1s, otherwise it’s regarded as NaN or Inf. Also note the difference between subnormal double and normal double. Some facts1234567891011121314$ python&gt;&gt;&gt; 0.1+0.20.30000000000000004&gt;&gt;&gt; e = 0.5**24&gt;&gt;&gt; a,b,c,d=1+d,-1-d,1-d,-1+d&gt;&gt;&gt; print(a+c+b+d, a+b+c+d)&gt;&gt;&gt; 0.0 0.0&gt;&gt;&gt; a1=np.float32(a); b1=np.float32(b); c1=np.float32(c); d1=np.float32(d)&gt;&gt;&gt; print(a1+c1+b1+d1, a1+b1+c1+d1)&gt;&gt;&gt; 5.9604645e-08 0.0&gt;&gt;&gt; print(&quot;%.26f, %.26f, %.26f, %.26f&quot; %(a,b,c,d))1.00000005960464477539062500, -1.00000005960464477539062500, 0.99999994039535522460937500, -0.99999994039535522460937500&gt;&gt;&gt; print(&quot;%.26f, %.26f, %.26f, %.26f&quot; % (a1,b1,c1,d1))&gt;&gt;&gt; 1.00000000000000000000000000, -1.00000000000000000000000000, 0.99999994039535522460937500, -0.99999994039535522460937500 It’s a known fact that associativity of FP’s addition does NOT hold and that’s why we see a1+c1+b1+d1, a1+b1+c1+d1 give distinct results. Another important fact is the rounding from FP64 to FP32 behaves differently between 1+e and 1-e. Clearly, rounding for 1-e is more accurate than another. It can be explained by following table. 12345678910111213141516171819202122case: 1-e FP64 representation: _decimal: 0.9999999403954 ____sign: 0 exponent: 01111111110 mantissa: 1111111111111111111111100000000000000000000000000000 FP32 representation: _decimal: 0.9999999403954 ____sign: 0 exponent: 01111110 mantissa: 11111111111111111111111case: 1+e FP64 representation: _decimal: 1.0000000596046 ____sign: 0 exponent: 01111111111 mantissa: 0000000000000000000000010000000000000000000000000000 FP32 representation: _decimal: 1.0000000000000 ____sign: 0 exponent: 01111111 mantissa: 00000000000000000000000 At rounding stage, the last 29 bits are rounded based on whether greater than 10...0(29 bits). It’s not hard to infer that the smallest(in abs value) number FP32 can represent without rounding error is 2^-24. Likewise, 2^-53 for FP64. Largest continuously representable integerPrecision is solely determined by number of bits for mantissa. Assume the exponent is 23, let’s look at number a = 1.11...1*2^23, here there are 23 bits of 1s followed by decimal. Any positive integer less than a is precisely representable in FP32. The next integer on real axis is b=a+1 and don’t worry about exponent for this moment, since it can goes way beyond 23. The mantissa for 1 is all 0s. Thus b=1.00..0*2^24=(16777216)~10. For the next one in binary sense, we have c=1.00..1*2^24, but unfortunately this is number 16777218 where 16777217 is missing. The same induction can be carried through and not hard to imagine that there leaves more blank spaces when numbers go large. 1234&gt;&gt;&gt; np.float32(2**24+1)&gt;&gt;&gt; 16777216.0&gt;&gt;&gt; np.float32(2**24+2)&gt;&gt;&gt; 16777218.0 As summary, by IEEE754 standard, the integer range which can be represented accurately is| FP | Range ||—-|————–|| 32 | [-2^24^,2^24^] || 64 | [-2^53^,2^53^] | Why 0.1+0.2 != 0.3We should by far aware that not all FP numbers can be represented accurately, e.g.1.25 can but 3.1415926… can not. 0.1 and 0.2 happen to sit between two representable numbers in FP64. So the sum is not a perfect 0.3. ConclusionIf you’re still thirsty on this topic, please check this blog.","categories":[{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"}],"tags":[{"name":"Floating-point","slug":"Floating-point","permalink":"http://example.com/tags/Floating-point/"}]},{"title":"Booking of my Leetcode","slug":"2020-10-08-Leetcode-booking","date":"2020-10-02T14:41:32.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Leetcode-booking.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Leetcode-booking.html","excerpt":":pencil2: Leetcode Solutions with Python,JavascriptUpdate time: 2020-10-02 07:30:29 Auto created by leetcode_generate I have solved 159 / 1459 problemswhile there are 230 problems still locked. If you want to use this tool please follow this Usage Guide If you have any question, please give me an issue. If you are loving solving problems in leetcode, please contact me to enjoy it together! (Notes: :lock: means you need to buy a book from Leetcode to unlock the problem)","text":":pencil2: Leetcode Solutions with Python,JavascriptUpdate time: 2020-10-02 07:30:29 Auto created by leetcode_generate I have solved 159 / 1459 problemswhile there are 230 problems still locked. If you want to use this tool please follow this Usage Guide If you have any question, please give me an issue. If you are loving solving problems in leetcode, please contact me to enjoy it together! (Notes: :lock: means you need to buy a book from Leetcode to unlock the problem) # Title Source Code Article Difficulty 1 two-sum Python :memo: Easy 2 add-two-numbers Python :memo: Medium 3 longest-substring-without-repeating-characters Python :memo: Medium 4 median-of-two-sorted-arrays :memo: Hard 5 longest-palindromic-substring Python :memo: Medium 6 zigzag-conversion :memo: Medium 7 reverse-integer Python :memo: Easy 8 string-to-integer-atoi :memo: Medium 9 palindrome-number Python :memo: Easy 10 regular-expression-matching :memo: Hard 11 container-with-most-water :memo: Medium 12 integer-to-roman :memo: Medium 13 roman-to-integer :memo: Easy 14 longest-common-prefix :memo: Easy 15 3sum Python :memo: Medium 16 3sum-closest Python :memo: Medium 17 letter-combinations-of-a-phone-number Python :memo: Medium 18 4sum Python :memo: Medium 19 remove-nth-node-from-end-of-list Python :memo: Medium 20 valid-parentheses Python :memo: Easy 21 merge-two-sorted-lists Python :memo: Easy 22 generate-parentheses :memo: Medium 23 merge-k-sorted-lists :memo: Hard 24 swap-nodes-in-pairs Python :memo: Medium 25 reverse-nodes-in-k-group :memo: Hard 26 remove-duplicates-from-sorted-array Python :memo: Easy 27 remove-element Python :memo: Easy 28 implement-strstr Python :memo: Easy 29 divide-two-integers :memo: Medium 30 substring-with-concatenation-of-all-words Hard 31 next-permutation :memo: Medium 32 longest-valid-parentheses Python :memo: Hard 33 search-in-rotated-sorted-array :memo: Medium 34 find-first-and-last-position-of-element-in-sorted-array :memo: Medium 35 search-insert-position Python :memo: Easy 36 valid-sudoku :memo: Medium 37 sudoku-solver :memo: Hard 38 count-and-say Python :memo: Easy 39 combination-sum Python :memo: Medium 40 combination-sum-ii Python Medium 41 first-missing-positive :memo: Hard 42 trapping-rain-water :memo: Hard 43 multiply-strings Medium 44 wildcard-matching :memo: Hard 45 jump-game-ii Python :memo: Hard 46 permutations Python :memo: Medium 47 permutations-ii Medium 48 rotate-image Python :memo: Medium 49 group-anagrams :memo: Medium 50 powx-n :memo: Medium 51 n-queens :memo: Hard 52 n-queens-ii :memo: Hard 53 maximum-subarray Python :memo: Easy 54 spiral-matrix Python :memo: Medium 55 jump-game Python :memo: Medium 56 merge-intervals Python :memo: Medium 57 insert-interval Python :memo: Medium 58 length-of-last-word Python :memo: Easy 59 spiral-matrix-ii Python :memo: Medium 60 permutation-sequence Python :memo: Hard 61 rotate-list Python :memo: Medium 62 unique-paths Python :memo: Medium 63 unique-paths-ii Python :memo: Medium 64 minimum-path-sum Python :memo: Medium 65 valid-number Hard 66 plus-one Python :memo: Easy 67 add-binary Python :memo: Easy 68 text-justification Python Hard 69 sqrtx Python :memo: Easy 70 climbing-stairs Python :memo: Easy 71 simplify-path Python :memo: Medium 72 edit-distance :memo: Hard 73 set-matrix-zeroes :memo: Medium 74 search-a-2d-matrix Python :memo: Medium 75 sort-colors Python :memo: Medium 76 minimum-window-substring :memo: Hard 77 combinations Python :memo: Medium 78 subsets Python :memo: Medium 79 word-search :memo: Medium 80 remove-duplicates-from-sorted-array-ii Python :memo: Medium 81 search-in-rotated-sorted-array-ii :memo: Medium 82 remove-duplicates-from-sorted-list-ii Python Medium 83 remove-duplicates-from-sorted-list Python :memo: Easy 84 largest-rectangle-in-histogram Python :memo: Hard 85 maximal-rectangle Python :memo: Hard 86 partition-list :memo: Medium 87 scramble-string Hard 88 merge-sorted-array Python :memo: Easy 89 gray-code Python Medium 90 subsets-ii Python Medium 91 decode-ways Python :memo: Medium 92 reverse-linked-list-ii Python :memo: Medium 93 restore-ip-addresses :memo: Medium 94 binary-tree-inorder-traversal Python :memo: Medium 95 unique-binary-search-trees-ii :memo: Medium 96 unique-binary-search-trees :memo: Medium 97 interleaving-string :memo: Hard 98 validate-binary-search-tree Python :memo: Medium 99 recover-binary-search-tree :memo: Hard 100 same-tree Python :memo: Easy 101 symmetric-tree Python :memo: Easy 102 binary-tree-level-order-traversal Python :memo: Medium 103 binary-tree-zigzag-level-order-traversal :memo: Medium 104 maximum-depth-of-binary-tree Python :memo: Easy 105 construct-binary-tree-from-preorder-and-inorder-traversal :memo: Medium 106 construct-binary-tree-from-inorder-and-postorder-traversal :memo: Medium 107 binary-tree-level-order-traversal-ii Python :memo: Easy 108 convert-sorted-array-to-binary-search-tree Python :memo: Easy 109 convert-sorted-list-to-binary-search-tree :memo: Medium 110 balanced-binary-tree Python :memo: Easy 111 minimum-depth-of-binary-tree Python :memo: Easy 112 path-sum Python :memo: Easy 113 path-sum-ii Python :memo: Medium 114 flatten-binary-tree-to-linked-list Python :memo: Medium 115 distinct-subsequences :memo: Hard 116 populating-next-right-pointers-in-each-node :memo: Medium 117 populating-next-right-pointers-in-each-node-ii :memo: Medium 118 pascals-triangle Python :memo: Easy 119 pascals-triangle-ii Python :memo: Easy 120 triangle Python Medium 121 best-time-to-buy-and-sell-stock Python :memo: Easy 122 best-time-to-buy-and-sell-stock-ii Python :memo: Easy 123 best-time-to-buy-and-sell-stock-iii :memo: Hard 124 binary-tree-maximum-path-sum Python :memo: Hard 125 valid-palindrome :memo: Easy 126 word-ladder-ii Hard 127 word-ladder :memo: Medium 128 longest-consecutive-sequence :memo: Hard 129 sum-root-to-leaf-numbers Python :memo: Medium 130 surrounded-regions :memo: Medium 131 palindrome-partitioning Python :memo: Medium 132 palindrome-partitioning-ii Hard 133 clone-graph :memo: Medium 134 gas-station :memo: Medium 135 candy :memo: Hard 136 single-number Python :memo: Easy 137 single-number-ii Python :memo: Medium 138 copy-list-with-random-pointer :memo: Medium 139 word-break :memo: Medium 140 word-break-ii :memo: Hard 141 linked-list-cycle Python :memo: Easy 142 linked-list-cycle-ii :memo: Medium 143 reorder-list :memo: Medium 144 binary-tree-preorder-traversal Python :memo: Medium 145 binary-tree-postorder-traversal Python :memo: Medium 146 lru-cache :memo: Medium 147 insertion-sort-list Medium 148 sort-list :memo: Medium 149 max-points-on-a-line :memo: Hard 150 evaluate-reverse-polish-notation :memo: Medium 151 reverse-words-in-a-string :memo: Medium 152 maximum-product-subarray Python :memo: Medium 153 find-minimum-in-rotated-sorted-array Python :memo: Medium 154 find-minimum-in-rotated-sorted-array-ii :memo: Hard 155 min-stack :memo: Easy 156 binary-tree-upside-down :lock: Medium 157 read-n-characters-given-read4 :lock: :memo: Easy 158 read-n-characters-given-read4-ii-call-multiple-times :lock: Hard 159 longest-substring-with-at-most-two-distinct-characters :lock: :memo: Medium 160 intersection-of-two-linked-lists :memo: Easy 161 one-edit-distance :lock: :memo: Medium 162 find-peak-element Python :memo: Medium 163 missing-ranges :lock: :memo: Medium 164 maximum-gap Python :memo: Hard 165 compare-version-numbers Python :memo: Medium 166 fraction-to-recurring-decimal :memo: Medium 167 two-sum-ii-input-array-is-sorted :memo: Easy 168 excel-sheet-column-title Python Easy 169 majority-element Python :memo: Easy 170 two-sum-iii-data-structure-design :lock: :memo: Easy 171 excel-sheet-column-number Python :memo: Easy 172 factorial-trailing-zeroes Python :memo: Easy 173 binary-search-tree-iterator :memo: Medium 174 dungeon-game :memo: Hard 179 largest-number :memo: Medium 186 reverse-words-in-a-string-ii :lock: :memo: Medium 187 repeated-dna-sequences :memo: Medium 188 best-time-to-buy-and-sell-stock-iv :memo: Hard 189 rotate-array Python :memo: Easy 190 reverse-bits Python :memo: Easy 191 number-of-1-bits Python :memo: Easy 198 house-robber Python :memo: Easy 199 binary-tree-right-side-view :memo: Medium 200 number-of-islands Python :memo: Medium 201 bitwise-and-of-numbers-range Python :memo: Medium 202 happy-number Python :memo: Easy 203 remove-linked-list-elements Python :memo: Easy 204 count-primes Python Easy 205 isomorphic-strings Python Easy 206 reverse-linked-list Python :memo: Easy 207 course-schedule :memo: Medium 208 implement-trie-prefix-tree :memo: Medium 209 minimum-size-subarray-sum :memo: Medium 210 course-schedule-ii :memo: Medium 211 design-add-and-search-words-data-structure :memo: Medium 212 word-search-ii :memo: Hard 213 house-robber-ii Python :memo: Medium 214 shortest-palindrome :memo: Hard 215 kth-largest-element-in-an-array Python :memo: Medium 216 combination-sum-iii :memo: Medium 217 contains-duplicate Python :memo: Easy 218 the-skyline-problem :memo: Hard 219 contains-duplicate-ii Python :memo: Easy 220 contains-duplicate-iii :memo: Medium 221 maximal-square :memo: Medium 222 count-complete-tree-nodes :memo: Medium 223 rectangle-area Python Medium 224 basic-calculator Python :memo: Hard 225 implement-stack-using-queues Python :memo: Easy 226 invert-binary-tree Python :memo: Easy 227 basic-calculator-ii Medium 228 summary-ranges Python :memo: Medium 229 majority-element-ii Python :memo: Medium 230 kth-smallest-element-in-a-bst Python :memo: Medium 231 power-of-two Python :memo: Easy 232 implement-queue-using-stacks :memo: Easy 233 number-of-digit-one :memo: Hard 234 palindrome-linked-list Python :memo: Easy 235 lowest-common-ancestor-of-a-binary-search-tree :memo: Easy 236 lowest-common-ancestor-of-a-binary-tree Python :memo: Medium 237 delete-node-in-a-linked-list Python :memo: Easy 238 product-of-array-except-self Python :memo: Medium 239 sliding-window-maximum Python :memo: Hard 240 search-a-2d-matrix-ii :memo: Medium 241 different-ways-to-add-parentheses Medium 242 valid-anagram Python :memo: Easy 243 shortest-word-distance :lock: :memo: Easy 244 shortest-word-distance-ii :lock: :memo: Medium 245 shortest-word-distance-iii :lock: Medium 246 strobogrammatic-number :lock: Easy 247 strobogrammatic-number-ii :lock: Medium 248 strobogrammatic-number-iii :lock: Hard 249 group-shifted-strings :lock: Medium 250 count-univalue-subtrees :lock: :memo: Medium 251 flatten-2d-vector :lock: :memo: Medium 252 meeting-rooms :lock: :memo: Easy 253 meeting-rooms-ii :lock: :memo: Medium 254 factor-combinations :lock: Medium 255 verify-preorder-sequence-in-binary-search-tree :lock: Medium 256 paint-house :lock: :memo: Medium 257 binary-tree-paths Python :memo: Easy 258 add-digits Python :memo: Easy 259 3sum-smaller :lock: :memo: Medium 260 single-number-iii Python :memo: Medium 261 graph-valid-tree :lock: :memo: Medium 263 ugly-number Python Easy 264 ugly-number-ii Python :memo: Medium 265 paint-house-ii :lock: :memo: Hard 266 palindrome-permutation :lock: :memo: Easy 267 palindrome-permutation-ii :lock: :memo: Medium 268 missing-number Python :memo: Easy 269 alien-dictionary :lock: :memo: Hard 270 closest-binary-search-tree-value :lock: :memo: Easy 271 encode-and-decode-strings :lock: :memo: Medium 272 closest-binary-search-tree-value-ii :lock: Hard 273 integer-to-english-words Python :memo: Hard 274 h-index Python :memo: Medium 275 h-index-ii :memo: Medium 276 paint-fence :lock: Easy 277 find-the-celebrity :lock: :memo: Medium 278 first-bad-version Python :memo: Easy 279 perfect-squares Python :memo: Medium 280 wiggle-sort :lock: :memo: Medium 281 zigzag-iterator :lock: Medium 282 expression-add-operators :memo: Hard 283 move-zeroes :memo: Easy 284 peeking-iterator :memo: Medium 285 inorder-successor-in-bst :lock: :memo: Medium 286 walls-and-gates :lock: :memo: Medium 287 find-the-duplicate-number Python :memo: Medium 288 unique-word-abbreviation :lock: :memo: Medium 289 game-of-life :memo: Medium 290 word-pattern :memo: Easy 291 word-pattern-ii :lock: Hard 292 nim-game Python :memo: Easy 293 flip-game :lock: Easy 294 flip-game-ii :lock: Medium 295 find-median-from-data-stream :memo: Hard 296 best-meeting-point :lock: :memo: Hard 297 serialize-and-deserialize-binary-tree :memo: Hard 298 binary-tree-longest-consecutive-sequence :lock: :memo: Medium 299 bulls-and-cows Python :memo: Medium 300 longest-increasing-subsequence :memo: Medium 301 remove-invalid-parentheses :memo: Hard 302 smallest-rectangle-enclosing-black-pixels :lock: :memo: Hard 303 range-sum-query-immutable Python :memo: Easy 304 range-sum-query-2d-immutable :memo: Medium 305 number-of-islands-ii :lock: :memo: Hard 306 additive-number Python Medium 307 range-sum-query-mutable Python :memo: Medium 308 range-sum-query-2d-mutable :lock: Hard 309 best-time-to-buy-and-sell-stock-with-cooldown :memo: Medium 310 minimum-height-trees Medium 311 sparse-matrix-multiplication :lock: Medium 312 burst-balloons :memo: Hard 313 super-ugly-number Python Medium 314 binary-tree-vertical-order-traversal :lock: :memo: Medium 315 count-of-smaller-numbers-after-self Hard 316 remove-duplicate-letters :memo: Hard 317 shortest-distance-from-all-buildings :lock: Hard 318 maximum-product-of-word-lengths :memo: Medium 319 bulb-switcher Python Medium 320 generalized-abbreviation :lock: :memo: Medium 321 create-maximum-number Hard 322 coin-change :memo: Medium 323 number-of-connected-components-in-an-undirected-graph :lock: Medium 324 wiggle-sort-ii Medium 325 maximum-size-subarray-sum-equals-k :lock: Medium 326 power-of-three Python :memo: Easy 327 count-of-range-sum Hard 328 odd-even-linked-list Python :memo: Medium 329 longest-increasing-path-in-a-matrix :memo: Hard 330 patching-array :memo: Hard 331 verify-preorder-serialization-of-a-binary-tree Python :memo: Medium 332 reconstruct-itinerary :memo: Medium 333 largest-bst-subtree :lock: Medium 334 increasing-triplet-subsequence :memo: Medium 335 self-crossing Hard 336 palindrome-pairs Python :memo: Hard 337 house-robber-iii Python Medium 338 counting-bits Python :memo: Medium 339 nested-list-weight-sum :lock: :memo: Easy 340 longest-substring-with-at-most-k-distinct-characters :lock: :memo: Hard 341 flatten-nested-list-iterator :memo: Medium 342 power-of-four Python :memo: Easy 343 integer-break Medium 344 reverse-string Python :memo: Easy 345 reverse-vowels-of-a-string Python Easy 346 moving-average-from-data-stream :lock: :memo: Easy 347 top-k-frequent-elements :memo: Medium 348 design-tic-tac-toe :lock: Medium 349 intersection-of-two-arrays Python :memo: Easy 350 intersection-of-two-arrays-ii Python :memo: Easy 351 android-unlock-patterns :lock: :memo: Medium 352 data-stream-as-disjoint-intervals Hard 353 design-snake-game :lock: Medium 354 russian-doll-envelopes :memo: Hard 355 design-twitter Medium 356 line-reflection :lock: Medium 357 count-numbers-with-unique-digits Medium 358 rearrange-string-k-distance-apart :lock: Hard 359 logger-rate-limiter :lock: :memo: Easy 360 sort-transformed-array :lock: Medium 361 bomb-enemy :lock: Medium 362 design-hit-counter :lock: Medium 363 max-sum-of-rectangle-no-larger-than-k Hard 364 nested-list-weight-sum-ii :lock: Medium 365 water-and-jug-problem Medium 366 find-leaves-of-binary-tree :lock: Medium 367 valid-perfect-square :memo: Easy 368 largest-divisible-subset :memo: Medium 369 plus-one-linked-list :lock: :memo: Medium 370 range-addition :lock: :memo: Medium 371 sum-of-two-integers :memo: Medium 372 super-pow Medium 373 find-k-pairs-with-smallest-sums Medium 374 guess-number-higher-or-lower :memo: Easy 375 guess-number-higher-or-lower-ii :memo: Medium 376 wiggle-subsequence :memo: Medium 377 combination-sum-iv Medium 378 kth-smallest-element-in-a-sorted-matrix :memo: Medium 379 design-phone-directory :lock: Medium 380 insert-delete-getrandom-o1 :memo: Medium 381 insert-delete-getrandom-o1-duplicates-allowed :memo: Hard 382 linked-list-random-node Medium 383 ransom-note :memo: Easy 384 shuffle-an-array :memo: Medium 385 mini-parser Medium 386 lexicographical-numbers Medium 387 first-unique-character-in-a-string :memo: Easy 388 longest-absolute-file-path Medium 389 find-the-difference :memo: Easy 390 elimination-game Medium 391 perfect-rectangle Hard 392 is-subsequence :memo: Easy 393 utf-8-validation :memo: Medium 394 decode-string :memo: Medium 395 longest-substring-with-at-least-k-repeating-characters Medium 396 rotate-function Medium 397 integer-replacement Medium 398 random-pick-index Medium 399 evaluate-division :memo: Medium 400 nth-digit Medium 401 binary-watch Easy 402 remove-k-digits :memo: Medium 403 frog-jump :memo: Hard 404 sum-of-left-leaves :memo: Easy 405 convert-a-number-to-hexadecimal Easy 406 queue-reconstruction-by-height :memo: Medium 407 trapping-rain-water-ii Hard 408 valid-word-abbreviation :lock: Easy 409 longest-palindrome :memo: Easy 410 split-array-largest-sum :memo: Hard 411 minimum-unique-word-abbreviation :lock: Hard 412 fizz-buzz :memo: Easy 413 arithmetic-slices :memo: Medium 414 third-maximum-number :memo: Easy 415 add-strings :memo: Easy 416 partition-equal-subset-sum :memo: Medium 417 pacific-atlantic-water-flow Medium 418 sentence-screen-fitting :lock: Medium 419 battleships-in-a-board Medium 420 strong-password-checker Hard 421 maximum-xor-of-two-numbers-in-an-array :memo: Medium 422 valid-word-square :lock: Easy 423 reconstruct-original-digits-from-english :memo: Medium 424 longest-repeating-character-replacement Medium 425 word-squares :lock: :memo: Hard 432 all-oone-data-structure Hard 433 minimum-genetic-mutation Medium 434 number-of-segments-in-a-string :memo: Easy 435 non-overlapping-intervals :memo: Medium 436 find-right-interval :memo: Medium 437 path-sum-iii :memo: Medium 438 find-all-anagrams-in-a-string :memo: Medium 439 ternary-expression-parser :lock: Medium 440 k-th-smallest-in-lexicographical-order Hard 441 arranging-coins :memo: Easy 442 find-all-duplicates-in-an-array :memo: Medium 443 string-compression :memo: Medium 444 sequence-reconstruction :lock: Medium 445 add-two-numbers-ii Medium 446 arithmetic-slices-ii-subsequence :memo: Hard 447 number-of-boomerangs Easy 448 find-all-numbers-disappeared-in-an-array :memo: Easy 449 serialize-and-deserialize-bst :memo: Medium 450 delete-node-in-a-bst :memo: Medium 451 sort-characters-by-frequency :memo: Medium 452 minimum-number-of-arrows-to-burst-balloons :memo: Medium 453 minimum-moves-to-equal-array-elements :memo: Easy 454 4sum-ii :memo: Medium 455 assign-cookies Easy 456 132-pattern :memo: Medium 457 circular-array-loop Medium 458 poor-pigs :memo: Hard 459 repeated-substring-pattern :memo: Easy 460 lfu-cache Hard 461 hamming-distance :memo: Easy 462 minimum-moves-to-equal-array-elements-ii :memo: Medium 463 island-perimeter :memo: Easy 464 can-i-win Medium 465 optimal-account-balancing :lock: Hard 466 count-the-repetitions :memo: Hard 467 unique-substrings-in-wraparound-string Medium 468 validate-ip-address :memo: Medium 469 convex-polygon :lock: Medium 471 encode-string-with-shortest-length :lock: Hard 472 concatenated-words Hard 473 matchsticks-to-square :memo: Medium 474 ones-and-zeroes :memo: Medium 475 heaters Easy 476 number-complement :memo: Easy 477 total-hamming-distance :memo: Medium 479 largest-palindrome-product Hard 480 sliding-window-median :memo: Hard 481 magical-string Medium 482 license-key-formatting Easy 483 smallest-good-base Hard 484 find-permutation :lock: :memo: Medium 485 max-consecutive-ones :memo: Easy 486 predict-the-winner :memo: Medium 487 max-consecutive-ones-ii :lock: Medium 488 zuma-game Hard 490 the-maze :lock: :memo: Medium 491 increasing-subsequences Medium 492 construct-the-rectangle Easy 493 reverse-pairs :memo: Hard 494 target-sum :memo: Medium 495 teemo-attacking :memo: Medium 496 next-greater-element-i :memo: Easy 498 diagonal-traverse :memo: Medium 499 the-maze-iii :lock: Hard 500 keyboard-row Easy 501 find-mode-in-binary-search-tree Easy 502 ipo :memo: Hard 503 next-greater-element-ii :memo: Medium 504 base-7 Easy 505 the-maze-ii :lock: :memo: Medium 506 relative-ranks Easy 507 perfect-number :memo: Easy 508 most-frequent-subtree-sum Medium 509 inorder-successor-in-bst-ii :lock: :memo: Medium 511 all-paths-from-source-lead-to-destination :lock: Medium 513 find-bottom-left-tree-value Medium 514 freedom-trail Hard 515 find-largest-value-in-each-tree-row Medium 516 longest-palindromic-subsequence Medium 517 super-washing-machines :memo: Hard 518 coin-change-2 :memo: Medium 520 detect-capital :memo: Easy 521 longest-uncommon-subsequence-i :memo: Easy 522 longest-uncommon-subsequence-ii :memo: Medium 523 continuous-subarray-sum :memo: Medium 524 longest-word-in-dictionary-through-deleting :memo: Medium 525 contiguous-array :memo: Medium 526 beautiful-arrangement :memo: Medium 527 word-abbreviation :lock: :memo: Hard 529 minesweeper Medium 530 minimum-absolute-difference-in-bst Easy 531 lonely-pixel-i :lock: Medium 532 k-diff-pairs-in-an-array :memo: Easy 533 lonely-pixel-ii :lock: Medium 535 encode-and-decode-tinyurl :memo: Medium 536 construct-binary-tree-from-string :lock: Medium 537 complex-number-multiplication :memo: Medium 538 convert-bst-to-greater-tree :memo: Medium 539 minimum-time-difference Medium 540 single-element-in-a-sorted-array :memo: Medium 541 reverse-string-ii :memo: Easy 542 01-matrix :memo: Medium 543 diameter-of-binary-tree :memo: Easy 544 output-contest-matches :lock: :memo: Medium 545 boundary-of-binary-tree :lock: :memo: Medium 546 remove-boxes :memo: Hard 547 friend-circles :memo: Medium 548 split-array-with-equal-sum :lock: :memo: Medium 549 binary-tree-longest-consecutive-sequence-ii :lock: :memo: Medium 551 student-attendance-record-i :memo: Easy 552 student-attendance-record-ii :memo: Hard 553 optimal-division :memo: Medium 554 brick-wall :memo: Medium 555 split-concatenated-strings :lock: :memo: Medium 556 next-greater-element-iii :memo: Medium 557 reverse-words-in-a-string-iii :memo: Easy 560 subarray-sum-equals-k :memo: Medium 561 array-partition-i :memo: Easy 562 longest-line-of-consecutive-one-in-matrix :lock: :memo: Medium 563 binary-tree-tilt :memo: Easy 564 find-the-closest-palindrome :memo: Hard 565 array-nesting :memo: Medium 566 reshape-the-matrix :memo: Easy 567 permutation-in-string :memo: Medium 568 maximum-vacation-days :lock: :memo: Hard 572 subtree-of-another-tree :memo: Easy 573 squirrel-simulation :lock: :memo: Medium 575 distribute-candies :memo: Easy 576 out-of-boundary-paths :memo: Medium 581 shortest-unsorted-continuous-subarray :memo: Easy 582 kill-process :lock: :memo: Medium 583 delete-operation-for-two-strings :memo: Medium 587 erect-the-fence :memo: Hard 588 design-in-memory-file-system :lock: :memo: Hard 591 tag-validator :memo: Hard 592 fraction-addition-and-subtraction :memo: Medium 593 valid-square :memo: Medium 594 longest-harmonious-subsequence :memo: Easy 598 range-addition-ii :memo: Easy 599 minimum-index-sum-of-two-lists :memo: Easy 600 non-negative-integers-without-consecutive-ones :memo: Hard 604 design-compressed-string-iterator :lock: :memo: Easy 605 can-place-flowers :memo: Easy 606 construct-string-from-binary-tree :memo: Easy 609 find-duplicate-file-in-system :memo: Medium 611 valid-triangle-number :memo: Medium 616 add-bold-tag-in-string :lock: :memo: Medium 617 merge-two-binary-trees :memo: Easy 621 task-scheduler :memo: Medium 623 add-one-row-to-tree :memo: Medium 624 maximum-distance-in-arrays :lock: :memo: Easy 625 minimum-factorization :lock: :memo: Medium 628 maximum-product-of-three-numbers :memo: Easy 629 k-inverse-pairs-array :memo: Hard 630 course-schedule-iii :memo: Hard 631 design-excel-sum-formula :lock: :memo: Hard 632 smallest-range-covering-elements-from-k-lists :memo: Hard 633 sum-of-square-numbers :memo: Medium 634 find-the-derangement-of-an-array :lock: :memo: Medium 635 design-log-storage-system :lock: :memo: Medium 636 exclusive-time-of-functions :memo: Medium 637 average-of-levels-in-binary-tree :memo: Easy 638 shopping-offers :memo: Medium 639 decode-ways-ii :memo: Hard 640 solve-the-equation :memo: Medium 642 design-search-autocomplete-system :lock: :memo: Hard 643 maximum-average-subarray-i :memo: Easy 644 maximum-average-subarray-ii :lock: :memo: Hard 645 set-mismatch :memo: Easy 646 maximum-length-of-pair-chain :memo: Medium 647 palindromic-substrings :memo: Medium 648 replace-words :memo: Medium 649 dota2-senate :memo: Medium 650 2-keys-keyboard :memo: Medium 651 4-keys-keyboard :lock: :memo: Medium 652 find-duplicate-subtrees :memo: Medium 653 two-sum-iv-input-is-a-bst :memo: Easy 654 maximum-binary-tree :memo: Medium 655 print-binary-tree :memo: Medium 656 coin-path :lock: :memo: Hard 657 robot-return-to-origin :memo: Easy 658 find-k-closest-elements :memo: Medium 659 split-array-into-consecutive-subsequences :memo: Medium 660 remove-9 :lock: :memo: Hard 661 image-smoother :memo: Easy 662 maximum-width-of-binary-tree :memo: Medium 663 equal-tree-partition :lock: :memo: Medium 664 strange-printer :memo: Hard 665 non-decreasing-array :memo: Easy 666 path-sum-iv :lock: :memo: Medium 667 beautiful-arrangement-ii :memo: Medium 668 kth-smallest-number-in-multiplication-table :memo: Hard 669 trim-a-binary-search-tree :memo: Easy 670 maximum-swap :memo: Medium 671 second-minimum-node-in-a-binary-tree :memo: Easy 672 bulb-switcher-ii :memo: Medium 673 number-of-longest-increasing-subsequence :memo: Medium 674 longest-continuous-increasing-subsequence :memo: Easy 675 cut-off-trees-for-golf-event :memo: Hard 676 implement-magic-dictionary :memo: Medium 677 map-sum-pairs :memo: Medium 678 valid-parenthesis-string :memo: Medium 679 24-game :memo: Hard 680 valid-palindrome-ii :memo: Easy 681 next-closest-time :lock: :memo: Medium 682 baseball-game :memo: Easy 683 k-empty-slots :lock: :memo: Hard 684 redundant-connection :memo: Medium 685 redundant-connection-ii :memo: Hard 686 repeated-string-match :memo: Medium 687 longest-univalue-path :memo: Easy 688 knight-probability-in-chessboard :memo: Medium 689 maximum-sum-of-3-non-overlapping-subarrays :memo: Hard 690 employee-importance :memo: Easy 691 stickers-to-spell-word :memo: Hard 692 top-k-frequent-words :memo: Medium 693 binary-number-with-alternating-bits :memo: Easy 694 number-of-distinct-islands :lock: :memo: Medium 695 max-area-of-island :memo: Medium 696 count-binary-substrings :memo: Easy 697 degree-of-an-array :memo: Easy 698 partition-to-k-equal-sum-subsets :memo: Medium 699 falling-squares :memo: Hard 711 number-of-distinct-islands-ii :lock: :memo: Hard 712 minimum-ascii-delete-sum-for-two-strings :memo: Medium 713 subarray-product-less-than-k :memo: Medium 714 best-time-to-buy-and-sell-stock-with-transaction-fee :memo: Medium 715 range-module :memo: Hard 716 max-stack :lock: :memo: Easy 717 1-bit-and-2-bit-characters :memo: Easy 718 maximum-length-of-repeated-subarray :memo: Medium 719 find-k-th-smallest-pair-distance :memo: Hard 720 longest-word-in-dictionary :memo: Easy 721 accounts-merge :memo: Medium 722 remove-comments :memo: Medium 723 candy-crush :lock: :memo: Medium 724 find-pivot-index :memo: Easy 725 split-linked-list-in-parts :memo: Medium 726 number-of-atoms :memo: Hard 727 minimum-window-subsequence :lock: :memo: Hard 728 self-dividing-numbers :memo: Easy 729 my-calendar-i :memo: Medium 730 count-different-palindromic-subsequences :memo: Hard 731 my-calendar-ii :memo: Medium 732 my-calendar-iii :memo: Hard 733 flood-fill :memo: Easy 734 sentence-similarity :lock: :memo: Easy 735 asteroid-collision :memo: Medium 736 parse-lisp-expression :memo: Hard 737 sentence-similarity-ii :lock: :memo: Medium 738 monotone-increasing-digits :memo: Medium 739 daily-temperatures :memo: Medium 740 delete-and-earn :memo: Medium 741 cherry-pickup :memo: Hard 742 to-lower-case :memo: Easy 743 closest-leaf-in-a-binary-tree :lock: :memo: Medium 744 network-delay-time :memo: Medium 745 find-smallest-letter-greater-than-target :memo: Easy 746 prefix-and-suffix-search :memo: Hard 747 min-cost-climbing-stairs :memo: Easy 748 largest-number-at-least-twice-of-others :memo: Easy 749 shortest-completing-word :memo: Easy 750 contain-virus :memo: Hard 751 number-of-corner-rectangles :lock: :memo: Medium 752 ip-to-cidr :lock: :memo: Medium 753 open-the-lock :memo: Medium 754 cracking-the-safe :memo: Hard 755 reach-a-number :memo: Medium 756 pour-water :lock: :memo: Medium 757 pyramid-transition-matrix :memo: Medium 758 convert-binary-search-tree-to-sorted-doubly-linked-list :lock: :memo: Medium 759 set-intersection-size-at-least-two :memo: Hard 760 bold-words-in-string :lock: :memo: Easy 761 employee-free-time :lock: :memo: Hard 762 find-anagram-mappings :lock: :memo: Easy 763 special-binary-string :memo: Hard 764 n-ary-tree-level-order-traversal :memo: Medium 765 serialize-and-deserialize-n-ary-tree :lock: :memo: Hard 766 flatten-a-multilevel-doubly-linked-list :memo: Medium 767 prime-number-of-set-bits-in-binary-representation :memo: Easy 768 partition-labels :memo: Medium 769 largest-plus-sign :memo: Medium 770 couples-holding-hands :memo: Hard 771 encode-n-ary-tree-to-binary-tree :lock: :memo: Hard 772 construct-quad-tree Medium 773 logical-or-of-two-binary-grids-represented-as-quad-trees Medium 774 maximum-depth-of-n-ary-tree :memo: Easy 775 n-ary-tree-preorder-traversal :memo: Easy 776 n-ary-tree-postorder-traversal :memo: Easy 777 toeplitz-matrix :memo: Easy 778 reorganize-string :memo: Medium 779 max-chunks-to-make-sorted-ii :memo: Hard 780 max-chunks-to-make-sorted :memo: Medium 781 basic-calculator-iv :memo: Hard 782 jewels-and-stones :memo: Easy 783 search-in-a-binary-search-tree :memo: Easy 784 insert-into-a-binary-search-tree :memo: Medium 785 basic-calculator-iii :lock: Hard 786 search-in-a-sorted-array-of-unknown-size :lock: :memo: Medium 787 sliding-puzzle :memo: Hard 788 minimize-max-distance-to-gas-station :lock: :memo: Hard 789 kth-largest-element-in-a-stream Easy 790 global-and-local-inversions :memo: Medium 791 split-bst :lock: :memo: Medium 792 binary-search :memo: Easy 793 swap-adjacent-in-lr-string :memo: Medium 794 swim-in-rising-water :memo: Hard 795 k-th-symbol-in-grammar :memo: Medium 796 reaching-points :memo: Hard 797 rabbits-in-forest :memo: Medium 798 transform-to-chessboard :memo: Hard 799 minimum-distance-between-bst-nodes :memo: Easy 800 letter-case-permutation :memo: Medium 801 is-graph-bipartite :memo: Medium 802 k-th-smallest-prime-fraction :memo: Hard 803 cheapest-flights-within-k-stops :memo: Medium 804 rotated-digits :memo: Easy 805 escape-the-ghosts :memo: Medium 806 domino-and-tromino-tiling :memo: Medium 807 custom-sort-string :memo: Medium 808 number-of-matching-subsequences :memo: Medium 809 preimage-size-of-factorial-zeroes-function :memo: Hard 810 valid-tic-tac-toe-state :memo: Medium 811 number-of-subarrays-with-bounded-maximum :memo: Medium 812 rotate-string :memo: Easy 813 all-paths-from-source-to-target :memo: Medium 814 smallest-rotation-with-highest-score :memo: Hard 815 champagne-tower :memo: Medium 816 design-hashset :memo: Easy 817 design-hashmap :memo: Easy 818 similar-rgb-color :lock: :memo: Easy 819 minimum-swaps-to-make-sequences-increasing :memo: Medium 820 find-eventual-safe-states :memo: Medium 821 bricks-falling-when-hit :memo: Hard 822 unique-morse-code-words :memo: Easy 823 split-array-with-same-average :memo: Hard 824 number-of-lines-to-write-string :memo: Easy 825 max-increase-to-keep-city-skyline :memo: Medium 826 soup-servings :memo: Medium 827 expressive-words :memo: Medium 828 chalkboard-xor-game :memo: Hard 829 subdomain-visit-count :memo: Easy 830 largest-triangle-area :memo: Easy 831 largest-sum-of-averages :memo: Medium 832 binary-tree-pruning :memo: Medium 833 bus-routes :memo: Hard 834 ambiguous-coordinates :memo: Medium 835 linked-list-components :memo: Medium 836 race-car :memo: Hard 837 most-common-word :memo: Easy 838 design-linked-list :memo: Medium 839 short-encoding-of-words :memo: Medium 841 shortest-distance-to-a-character :memo: Easy 842 card-flipping-game :memo: Medium 843 binary-trees-with-factors :memo: Medium 850 insert-into-a-sorted-circular-linked-list :lock: :memo: Medium 851 goat-latin :memo: Easy 852 friends-of-appropriate-ages :memo: Medium 853 most-profit-assigning-work :memo: Medium 854 making-a-large-island :memo: Hard 855 count-unique-characters-of-all-substrings-of-a-given-string :memo: Hard 856 consecutive-numbers-sum :memo: Hard 857 positions-of-large-groups :memo: Easy 858 masking-personal-information :memo: Medium 859 design-circular-deque Medium 860 design-circular-queue :memo: Medium 861 flipping-an-image :memo: Easy 862 find-and-replace-in-string :memo: Medium 863 sum-of-distances-in-tree :memo: Hard 864 image-overlap :memo: Medium 865 robot-room-cleaner :lock: :memo: Hard 866 rectangle-overlap :memo: Easy 867 new-21-game :memo: Medium 868 push-dominoes :memo: Medium 869 similar-string-groups :memo: Hard 870 magic-squares-in-grid :memo: Medium 871 keys-and-rooms :memo: Medium 872 split-array-into-fibonacci-sequence :memo: Medium 873 guess-the-word :memo: Hard 874 backspace-string-compare :memo: Easy 875 longest-mountain-in-array :memo: Medium 876 hand-of-straights :memo: Medium 877 shortest-path-visiting-all-nodes :memo: Hard 878 shifting-letters :memo: Medium 879 maximize-distance-to-closest-person :memo: Medium 880 rectangle-area-ii :memo: Hard 881 loud-and-rich :memo: Medium 882 peak-index-in-a-mountain-array :memo: Easy 883 car-fleet :memo: Medium 884 k-similar-strings :memo: Hard 885 exam-room :memo: Medium 886 score-of-parentheses :memo: Medium 887 minimum-cost-to-hire-k-workers :memo: Hard 888 mirror-reflection :memo: Medium 889 buddy-strings :memo: Easy 890 lemonade-change :memo: Easy 891 score-after-flipping-matrix :memo: Medium 892 shortest-subarray-with-sum-at-least-k :memo: Hard 893 all-nodes-distance-k-in-binary-tree :memo: Medium 894 random-pick-with-blacklist :memo: Hard 895 shortest-path-to-get-all-keys :memo: Hard 896 smallest-subtree-with-all-the-deepest-nodes :memo: Medium 897 prime-palindrome :memo: Medium 898 transpose-matrix :memo: Easy 899 binary-gap :memo: Easy 900 reordered-power-of-2 :memo: Medium 901 advantage-shuffle :memo: Medium 902 minimum-number-of-refueling-stops :memo: Hard 903 implement-rand10-using-rand7 :memo: Medium 904 leaf-similar-trees :memo: Easy 905 length-of-longest-fibonacci-subsequence :memo: Medium 906 walking-robot-simulation :memo: Easy 907 koko-eating-bananas :memo: Medium 908 middle-of-the-linked-list :memo: Easy 909 stone-game :memo: Medium 910 nth-magical-number :memo: Hard 911 profitable-schemes :memo: Hard 912 random-pick-with-weight :memo: Medium 913 random-flip-matrix :memo: Medium 914 random-point-in-non-overlapping-rectangles :memo: Medium 915 generate-random-point-in-a-circle :memo: Medium 916 decoded-string-at-index :memo: Medium 917 boats-to-save-people :memo: Medium 918 reachable-nodes-in-subdivided-graph :memo: Hard 919 projection-area-of-3d-shapes :memo: Easy 920 uncommon-words-from-two-sentences :memo: Easy 921 spiral-matrix-iii :memo: Medium 922 possible-bipartition :memo: Medium 923 super-egg-drop :memo: Hard 924 fair-candy-swap :memo: Easy 925 construct-binary-tree-from-preorder-and-postorder-traversal :memo: Medium 926 find-and-replace-pattern :memo: Medium 927 sum-of-subsequence-widths :memo: Hard 928 surface-area-of-3d-shapes :memo: Easy 929 groups-of-special-equivalent-strings :memo: Easy 930 all-possible-full-binary-trees :memo: Medium 931 maximum-frequency-stack :memo: Hard 932 monotonic-array :memo: Easy 933 increasing-order-search-tree :memo: Easy 934 bitwise-ors-of-subarrays :memo: Medium 935 orderly-queue :memo: Hard 936 rle-iterator :memo: Medium 937 online-stock-span :memo: Medium 938 numbers-at-most-n-given-digit-set :memo: Hard 939 valid-permutations-for-di-sequence :memo: Hard 940 fruit-into-baskets :memo: Medium 941 sort-array-by-parity :memo: Easy 942 super-palindromes :memo: Hard 943 sum-of-subarray-minimums :memo: Medium 944 smallest-range-i :memo: Easy 945 snakes-and-ladders :memo: Medium 946 smallest-range-ii :memo: Medium 947 online-election :memo: Medium 948 sort-an-array Medium 949 cat-and-mouse :memo: Hard 950 x-of-a-kind-in-a-deck-of-cards :memo: Easy 951 partition-array-into-disjoint-intervals :memo: Medium 952 word-subsets :memo: Medium 953 reverse-only-letters :memo: Easy 954 maximum-sum-circular-subarray :memo: Medium 955 complete-binary-tree-inserter :memo: Medium 956 number-of-music-playlists :memo: Hard 957 minimum-add-to-make-parentheses-valid :memo: Medium 958 sort-array-by-parity-ii :memo: Easy 959 3sum-with-multiplicity :memo: Medium 960 minimize-malware-spread :memo: Hard 961 long-pressed-name :memo: Easy 962 flip-string-to-monotone-increasing :memo: Medium 963 three-equal-parts :memo: Hard 964 minimize-malware-spread-ii :memo: Hard 965 unique-email-addresses :memo: Easy 966 binary-subarrays-with-sum :memo: Medium 967 minimum-falling-path-sum :memo: Medium 968 beautiful-array :memo: Medium 969 number-of-recent-calls :memo: Easy 971 shortest-bridge :memo: Medium 972 knight-dialer :memo: Medium 973 stamping-the-sequence :memo: Hard 974 reorder-data-in-log-files :memo: Easy 975 range-sum-of-bst :memo: Easy 976 minimum-area-rectangle :memo: Medium 977 distinct-subsequences-ii :memo: Hard 978 valid-mountain-array :memo: Easy 979 di-string-match :memo: Easy 980 find-the-shortest-superstring :memo: Hard 981 delete-columns-to-make-sorted :memo: Easy 982 minimum-increment-to-make-array-unique :memo: Medium 983 validate-stack-sequences :memo: Medium 984 most-stones-removed-with-same-row-or-column :memo: Medium 985 bag-of-tokens :memo: Medium 986 largest-time-for-given-digits :memo: Medium 987 reveal-cards-in-increasing-order :memo: Medium 988 flip-equivalent-binary-trees :memo: Medium 989 largest-component-size-by-common-factor :memo: Hard 990 verifying-an-alien-dictionary :memo: Easy 991 array-of-doubled-pairs :memo: Medium 992 delete-columns-to-make-sorted-ii :memo: Medium 993 tallest-billboard :memo: Hard 994 prison-cells-after-n-days :memo: Medium 998 check-completeness-of-a-binary-tree :memo: Medium 999 regions-cut-by-slashes :memo: Medium 1000 delete-columns-to-make-sorted-iii :memo: Hard 1001 n-repeated-element-in-size-2n-array :memo: Easy 1002 maximum-width-ramp :memo: Medium 1003 minimum-area-rectangle-ii :memo: Medium 1004 least-operators-to-express-number :memo: Hard 1005 univalued-binary-tree :memo: Easy 1006 vowel-spellchecker :memo: Medium 1007 numbers-with-same-consecutive-differences :memo: Medium 1008 binary-tree-cameras :memo: Hard 1009 pancake-sorting :memo: Medium 1010 powerful-integers :memo: Easy 1011 flip-binary-tree-to-match-preorder-traversal :memo: Medium 1012 equal-rational-numbers :memo: Hard 1013 fibonacci-number :memo: Easy 1014 k-closest-points-to-origin :memo: Medium 1016 subarray-sums-divisible-by-k :memo: Medium 1017 odd-even-jump :memo: Hard 1018 largest-perimeter-triangle :memo: Easy 1019 squares-of-a-sorted-array :memo: Easy 1020 longest-turbulent-subarray :memo: Medium 1021 distribute-coins-in-binary-tree :memo: Medium 1022 unique-paths-iii :memo: Hard 1023 time-based-key-value-store :memo: Medium 1024 triples-with-bitwise-and-equal-to-zero Hard 1025 minimum-cost-for-tickets :memo: Medium 1026 string-without-aaa-or-bbb :memo: Medium 1027 sum-of-even-numbers-after-queries :memo: Easy 1028 interval-list-intersections :memo: Medium 1029 vertical-order-traversal-of-a-binary-tree :memo: Medium 1030 smallest-string-starting-from-leaf :memo: Medium 1031 add-to-array-form-of-integer :memo: Easy 1032 satisfiability-of-equality-equations :memo: Medium 1033 broken-calculator :memo: Medium 1034 subarrays-with-k-different-integers :memo: Hard 1035 cousins-in-binary-tree :memo: Easy 1036 rotting-oranges :memo: Medium 1037 minimum-number-of-k-consecutive-bit-flips :memo: Hard 1038 number-of-squareful-arrays :memo: Hard 1039 find-the-town-judge :memo: Easy 1040 maximum-binary-tree-ii Medium 1041 available-captures-for-rook Easy 1042 minimum-cost-to-merge-stones Hard 1043 grid-illumination Hard 1044 find-common-characters Easy 1045 check-if-word-is-valid-after-substitutions Medium 1046 max-consecutive-ones-iii :memo: Medium 1047 maximize-sum-of-array-after-k-negations Easy 1048 clumsy-factorial Medium 1049 minimum-domino-rotations-for-equal-row :memo: Medium 1050 construct-binary-search-tree-from-preorder-traversal :memo: Medium 1051 shortest-way-to-form-string :lock: Medium 1052 campus-bikes :lock: Medium 1053 minimize-rounding-error-to-meet-target :lock: Medium 1054 complement-of-base-10-integer :memo: Easy 1055 pairs-of-songs-with-total-durations-divisible-by-60 Easy 1056 capacity-to-ship-packages-within-d-days Medium 1057 numbers-with-repeated-digits Hard 1058 lexicographically-smallest-equivalent-string :lock: Medium 1059 missing-element-in-sorted-array :lock: :memo: Medium 1060 longest-repeating-substring :lock: :memo: Medium 1061 number-of-valid-subarrays :lock: Hard 1062 partition-array-into-three-parts-with-equal-sum Easy 1063 best-sightseeing-pair Medium 1064 smallest-integer-divisible-by-k :memo: Medium 1065 binary-string-with-substrings-representing-1-to-n Medium 1066 fixed-point :lock: Easy 1067 campus-bikes-ii :lock: Medium 1068 digit-count-in-range :lock: Hard 1069 confusing-number :lock: Easy 1070 convert-to-base-2 Medium 1071 binary-prefix-divisible-by-5 Easy 1072 next-greater-node-in-linked-list Medium 1073 number-of-enclaves Medium 1074 high-five :lock: Easy 1075 index-pairs-of-a-string :lock: Easy 1076 brace-expansion :lock: Medium 1077 confusing-number-ii :lock: Hard 1078 remove-outermost-parentheses Easy 1079 sum-of-root-to-leaf-binary-numbers :memo: Easy 1080 camelcase-matching Medium 1081 video-stitching Medium 1082 sum-of-digits-in-the-minimum-number :lock: Easy 1083 two-sum-less-than-k :lock: :memo: Easy 1084 find-k-length-substrings-with-no-repeated-characters :lock: Medium 1085 the-earliest-moment-when-everyone-become-friends :lock: Medium 1086 divisor-game Easy 1087 longest-arithmetic-subsequence Medium 1088 number-of-days-in-a-month :lock: Easy 1089 remove-vowels-from-a-string :lock: Easy 1090 armstrong-number :lock: Easy 1091 maximum-average-subtree :lock: Medium 1092 maximum-difference-between-node-and-ancestor Medium 1093 recover-a-tree-from-preorder-traversal Hard 1094 matrix-cells-in-distance-order Easy 1095 two-city-scheduling :memo: Medium 1096 maximum-sum-of-two-non-overlapping-subarrays Medium 1097 stream-of-characters :memo: Hard 1098 largest-unique-number :lock: Easy 1099 path-with-maximum-minimum-value :lock: Medium 1100 connecting-cities-with-minimum-cost :lock: Medium 1101 parallel-courses :lock: Hard 1102 check-if-a-number-is-majority-element-in-a-sorted-array :lock: Easy 1103 moving-stones-until-consecutive Easy 1104 coloring-a-border Medium 1105 uncrossed-lines Medium 1106 escape-a-large-maze Hard 1107 minimum-swaps-to-group-all-1s-together :lock: Medium 1108 analyze-user-website-visit-pattern :lock: Medium 1111 minimum-score-triangulation-of-polygon Medium 1112 find-words-that-can-be-formed-by-characters Easy 1113 moving-stones-until-consecutive-ii Medium 1114 binary-search-tree-to-greater-sum-tree Medium 1115 valid-boomerang Easy 1116 maximum-level-sum-of-a-binary-tree :memo: Medium 1117 as-far-from-land-as-possible Medium 1118 divide-array-into-increasing-sequences :lock: Hard 1119 robot-bounded-in-circle :memo: Medium 1120 flower-planting-with-no-adjacent Easy 1121 partition-array-for-maximum-sum Medium 1122 longest-duplicate-substring :memo: Hard 1123 single-row-keyboard :lock: Easy 1124 string-transforms-into-another-string :lock: Hard 1125 design-file-system :lock: Medium 1126 minimum-cost-to-connect-sticks :lock: Medium 1127 last-stone-weight :memo: Easy 1128 remove-all-adjacent-duplicates-in-string :memo: Easy 1129 longest-string-chain Medium 1130 last-stone-weight-ii Medium 1131 count-substrings-with-only-one-distinct-letter :lock: Easy 1132 before-and-after-puzzle :lock: Medium 1133 last-substring-in-lexicographical-order Hard 1134 shortest-distance-to-target-color :lock: Medium 1137 height-checker Easy 1138 grumpy-bookstore-owner Medium 1139 previous-permutation-with-one-swap Medium 1140 distant-barcodes Medium 1141 how-many-apples-can-you-put-into-the-basket :lock: Easy 1142 minimum-knight-moves :lock: Medium 1143 find-smallest-common-element-in-all-rows :lock: :memo: Medium 1144 optimize-water-distribution-in-a-village :lock: Hard 1145 number-of-submatrices-that-sum-to-target :memo: Hard 1146 greatest-common-divisor-of-strings Easy 1147 flip-columns-for-maximum-number-of-equal-rows Medium 1148 adding-two-negabinary-numbers Medium 1149 intersection-of-three-sorted-arrays :lock: Easy 1150 two-sum-bsts :lock: :memo: Medium 1151 stepping-numbers :lock: Medium 1152 maximum-number-of-ones :lock: Hard 1156 occurrences-after-bigram Easy 1157 insufficient-nodes-in-root-to-leaf-paths Medium 1159 smallest-subsequence-of-distinct-characters Medium 1160 letter-tile-possibilities Medium 1164 missing-number-in-arithmetic-progression :lock: Easy 1165 meeting-scheduler :lock: Medium 1166 toss-strange-coins :lock: Medium 1167 minimum-time-to-build-blocks :lock: Hard 1168 duplicate-zeros :memo: Easy 1169 largest-values-from-labels Medium 1170 shortest-common-supersequence Hard 1171 shortest-path-in-binary-matrix Medium 1175 array-transformation :lock: Easy 1176 design-a-leaderboard :lock: Medium 1177 tree-diameter :lock: Medium 1178 valid-palindrome-iii :lock: Hard 1183 statistics-from-a-large-sample Medium 1184 car-pooling :memo: Medium 1185 find-in-mountain-array Hard 1188 brace-expansion-ii Hard 1189 encode-number :lock: Medium 1190 smallest-common-region :lock: Medium 1191 synonymous-sentences :lock: Medium 1192 divide-chocolate :lock: Hard 1194 path-in-zigzag-labelled-binary-tree Medium 1195 distribute-candies-to-people :memo: Easy 1196 filling-bookcase-shelves Medium 1197 parsing-a-boolean-expression Hard 1199 hexspeak :lock: Easy 1200 remove-interval :lock: :memo: Medium 1201 delete-tree-nodes :lock: Medium 1202 palindrome-removal :lock: Hard 1205 defanging-an-ip-address Easy 1206 corporate-flight-bookings Medium 1207 delete-nodes-and-return-forest Medium 1208 maximum-nesting-depth-of-two-valid-parentheses-strings Medium 1211 iterator-for-combination :memo: Medium 1212 sequential-digits :memo: Medium 1213 handshakes-that-dont-cross :lock: Hard 1217 relative-sort-array Easy 1218 lowest-common-ancestor-of-deepest-leaves Medium 1219 longest-well-performing-interval Medium 1220 smallest-sufficient-team Hard 1221 element-appearing-more-than-25-in-sorted-array Easy 1222 remove-covered-intervals :memo: Medium 1224 minimum-falling-path-sum-ii Hard 1227 number-of-equivalent-domino-pairs Easy 1228 minimum-cost-tree-from-leaf-values Medium 1229 shortest-path-with-alternating-colors Medium 1230 maximum-of-absolute-value-expression Medium 1231 replace-elements-with-greatest-element-on-right-side Easy 1232 sum-of-mutated-array-closest-to-target Medium 1233 number-of-ships-in-a-rectangle :lock: Hard 1234 number-of-paths-with-max-score Hard 1236 n-th-tribonacci-number :memo: Easy 1238 alphabet-board-path Medium 1239 largest-1-bordered-square Medium 1240 stone-game-ii Medium 1241 decompress-run-length-encoded-list Easy 1242 matrix-block-sum Medium 1243 sum-of-nodes-with-even-valued-grandparent Medium 1244 distinct-echo-substrings Hard 1247 decrease-elements-to-make-array-zigzag Medium 1248 binary-tree-coloring-game Medium 1249 snapshot-array Medium 1250 longest-common-subsequence :memo: Medium 1251 longest-chunked-palindrome-decomposition Hard 1252 break-a-palindrome Medium 1253 sort-the-matrix-diagonally Medium 1254 deepest-leaves-sum :memo: Medium 1255 reverse-subarray-to-maximize-array-value Hard 1256 rank-transform-of-an-array Easy 1260 day-of-the-year Easy 1261 swap-for-longest-repeated-character-substring Medium 1262 online-majority-element-in-subarray Hard 1263 number-of-dice-rolls-with-target-sum Medium 1267 remove-zero-sum-consecutive-nodes-from-linked-list Medium 1270 dinner-plate-stacks Hard 1271 web-crawler :lock: Medium 1272 invalid-transactions Medium 1273 compare-strings-by-frequency-of-the-smallest-character Easy 1274 number-of-days-between-two-dates Easy 1275 validate-binary-tree-nodes Medium 1276 closest-divisors Medium 1277 largest-multiple-of-three Hard 1279 prime-arrangements Easy 1280 diet-plan-performance :lock: Easy 1281 can-make-palindrome-from-substring Medium 1282 number-of-valid-words-for-each-puzzle Hard 1283 reformat-date Easy 1284 four-divisors Medium 1285 balance-a-binary-search-tree Medium 1286 constrained-subsequence-sum Hard 1287 distance-between-bus-stops Easy 1288 maximum-subarray-sum-with-one-deletion Medium 1289 day-of-the-week Easy 1290 make-array-strictly-increasing Hard 1293 three-consecutive-odds Easy 1296 kth-ancestor-of-a-tree-node Hard 1297 maximum-number-of-balloons Easy 1298 reverse-substrings-between-each-pair-of-parentheses Medium 1299 k-concatenation-maximum-sum Medium 1300 critical-connections-in-a-network Hard 1304 longest-happy-string Medium 1306 minimum-absolute-difference Easy 1307 ugly-number-iii Medium 1308 smallest-string-with-swaps Medium 1309 sort-items-by-groups-respecting-dependencies Hard 1319 unique-number-of-occurrences Easy 1320 remove-all-adjacent-duplicates-in-string-ii :memo: Medium 1321 get-equal-substrings-within-budget Medium 1322 minimum-moves-to-reach-target-with-rotations Hard 1325 path-with-maximum-probability Medium 1329 minimum-cost-to-move-chips-to-the-same-position :memo: Easy 1330 longest-arithmetic-subsequence-of-given-difference Medium 1331 path-with-maximum-gold Medium 1332 count-vowels-permutation Hard 1337 design-skiplist Hard 1341 split-a-string-in-balanced-strings Easy 1342 queens-that-can-attack-the-king Medium 1343 dice-roll-simulation Medium 1344 maximum-equal-frequency Hard 1345 perform-string-shifts :lock: :memo: Easy 1349 check-if-it-is-a-straight-line Easy 1350 remove-sub-folders-from-the-filesystem Medium 1351 replace-the-substring-for-balanced-string Medium 1352 maximum-profit-in-job-scheduling Hard 1358 find-positive-integer-solution-for-a-given-equation Easy 1359 circular-permutation-in-binary-representation Medium 1360 maximum-length-of-a-concatenated-string-with-unique-characters Medium 1361 tiling-a-rectangle-with-the-fewest-squares Hard 1362 airplane-seat-assignment-probability Medium 1366 first-unique-number :lock: :memo: Medium 1369 minimum-swaps-to-make-strings-equal Medium 1370 count-number-of-nice-subarrays Medium 1371 minimum-remove-to-make-valid-parentheses :memo: Medium 1372 check-if-it-is-a-good-array Hard 1374 leftmost-column-with-at-least-a-one :lock: :memo: Medium 1378 cells-with-odd-values-in-a-matrix Easy 1379 reconstruct-a-2-row-binary-matrix Medium 1380 number-of-closed-islands Medium 1381 maximum-score-words-formed-by-letters Hard 1386 shift-2d-grid :memo: Easy 1387 find-elements-in-a-contaminated-binary-tree Medium 1388 greatest-sum-divisible-by-three Medium 1389 minimum-moves-to-move-a-box-to-their-target-location Hard 1391 counting-elements :lock: :memo: Easy 1395 minimum-time-visiting-all-points Easy 1396 count-servers-that-communicate Medium 1397 search-suggestions-system Medium 1398 number-of-ways-to-stay-in-the-same-place-after-some-steps Hard 1400 find-winner-on-a-tic-tac-toe-game Easy 1401 number-of-burgers-with-no-waste-of-ingredients Medium 1402 count-square-submatrices-with-all-ones Medium 1403 palindrome-partitioning-iii Hard 1404 print-immutable-linked-list-in-reverse :lock: Medium 1406 subtract-the-product-and-sum-of-digits-of-an-integer Easy 1407 group-the-people-given-the-group-size-they-belong-to Medium 1408 find-the-smallest-divisor-given-a-threshold Medium 1409 minimum-number-of-flips-to-convert-binary-matrix-to-zero-matrix Hard 1411 convert-binary-number-in-a-linked-list-to-integer :memo: Easy 1413 maximum-side-length-of-a-square-with-sum-less-than-or-equal-to-threshold Medium 1414 shortest-path-in-a-grid-with-obstacles-elimination Hard 1421 find-numbers-with-even-number-of-digits Easy 1422 divide-array-in-sets-of-k-consecutive-numbers Medium 1423 maximum-number-of-occurrences-of-a-substring Medium 1424 maximum-candies-you-can-get-from-boxes Hard 1426 find-n-unique-integers-sum-up-to-zero Easy 1427 all-elements-in-two-binary-search-trees :memo: Medium 1428 jump-game-iii :memo: Medium 1429 verbal-arithmetic-puzzle Hard 1432 check-if-a-string-is-a-valid-sequence-from-root-to-leaves-path-in-a-binary-tree :lock: Medium 1434 decrypt-string-from-alphabet-to-integer-mapping Easy 1435 xor-queries-of-a-subarray Medium 1436 get-watched-videos-by-your-friends Medium 1437 minimum-insertion-steps-to-make-a-string-palindrome Hard 1440 convert-integer-to-the-sum-of-two-no-zero-integers Easy 1441 minimum-flips-to-make-a-or-b-equal-to-c Medium 1442 number-of-operations-to-make-network-connected Medium 1443 minimum-distance-to-type-a-word-using-two-fingers Hard 1444 number-of-steps-to-reduce-a-number-to-zero :memo: Easy 1445 number-of-sub-arrays-of-size-k-and-average-greater-than-or-equal-to-threshold Medium 1446 angle-between-hands-of-a-clock :memo: Medium 1447 jump-game-iv :memo: Hard 1448 maximum-69-number Easy 1449 print-words-vertically Medium 1450 delete-leaves-with-a-given-value Medium 1451 minimum-number-of-taps-to-open-to-water-a-garden Hard 1454 remove-palindromic-subsequences :memo: Easy 1455 filter-restaurants-by-vegan-friendly-price-and-distance Medium 1456 find-the-city-with-the-smallest-number-of-neighbors-at-a-threshold-distance Medium 1457 minimum-difficulty-of-a-job-schedule Hard 1458 sort-integers-by-the-number-of-1-bits Easy 1459 apply-discount-every-n-orders Medium 1460 number-of-substrings-containing-all-three-characters Medium 1461 count-all-valid-pickup-and-delivery-options Hard 1463 the-k-weakest-rows-in-a-matrix :memo: Easy 1464 reduce-array-size-to-the-half :memo: Medium 1465 maximum-product-of-splitted-binary-tree :memo: Medium 1466 jump-game-v Hard 1468 check-if-n-and-its-double-exist Easy 1469 minimum-number-of-steps-to-make-two-strings-anagram Medium 1470 tweet-counts-per-frequency Medium 1471 maximum-students-taking-exam Hard 1472 increasing-decreasing-string Easy 1473 find-the-longest-substring-containing-vowels-in-even-counts Medium 1474 longest-zigzag-path-in-a-binary-tree Medium 1475 maximum-sum-bst-in-binary-tree Hard 1476 count-negative-numbers-in-a-sorted-matrix Easy 1477 product-of-the-last-k-numbers Medium 1478 maximum-number-of-events-that-can-be-attended Medium 1479 construct-target-array-with-multiple-sums :memo: Hard 1482 how-many-numbers-are-smaller-than-the-current-number Easy 1483 rank-teams-by-votes Medium 1484 linked-list-in-binary-tree Medium 1485 minimum-cost-to-make-at-least-one-valid-path-in-a-grid Hard 1486 find-the-distance-value-between-two-arrays Easy 1487 cinema-seat-allocation Medium 1488 sort-integers-by-the-power-value Medium 1489 pizza-with-3n-slices Hard 1490 generate-a-string-with-characters-that-have-odd-counts Easy 1491 bulb-switcher-iii Medium 1492 time-needed-to-inform-all-employees Medium 1493 frog-position-after-t-seconds Hard 1496 lucky-numbers-in-a-matrix Easy 1497 design-a-stack-with-increment-operation Medium 1498 find-a-corresponding-node-of-a-binary-tree-in-a-clone-of-that-tree Medium 1499 maximum-performance-of-a-team Hard 1500 count-largest-group Easy 1501 circle-and-rectangle-overlapping Medium 1502 construct-k-palindrome-strings Medium 1503 reducing-dishes Hard 1505 create-target-array-in-the-given-order Easy 1507 check-if-there-is-a-valid-path-in-a-grid Medium 1508 longest-happy-prefix Hard 1510 find-lucky-integer-in-an-array :memo: Easy 1511 count-number-of-teams Medium 1512 design-underground-system :memo: Medium 1513 find-all-good-strings Hard 1514 minimum-value-to-get-positive-step-by-step-sum Easy 1515 find-the-minimum-number-of-fibonacci-numbers-whose-sum-is-k Medium 1516 the-k-th-lexicographical-string-of-all-happy-strings-of-length-n Medium 1517 restore-the-array Hard 1519 minimum-subsequence-in-non-increasing-order Easy 1520 number-of-steps-to-reduce-a-number-in-binary-representation-to-one Medium 1522 stone-game-iii Hard 1524 string-matching-in-an-array Easy 1525 queries-on-a-permutation-with-key Medium 1526 html-entity-parser Medium 1527 number-of-ways-to-paint-n-3-grid Hard 1528 kids-with-the-greatest-number-of-candies Easy 1529 max-difference-you-can-get-from-changing-an-integer Medium 1530 check-if-a-string-can-break-another-string Medium 1531 number-of-ways-to-wear-different-hats-to-each-other Hard 1532 reformat-the-string Easy 1533 display-table-of-food-orders-in-a-restaurant Medium 1534 minimum-number-of-frogs-croaking Medium 1535 build-array-where-you-can-find-the-maximum-exactly-k-comparisons Hard 1537 maximum-score-after-splitting-a-string Easy 1538 maximum-points-you-can-obtain-from-cards Medium 1539 diagonal-traverse-ii Medium 1542 consecutive-characters :memo: Easy 1543 simplified-fractions Medium 1544 count-good-nodes-in-binary-tree Medium 1545 form-largest-integer-with-digits-that-add-up-to-target Hard 1547 destination-city Easy 1548 check-if-all-1s-are-at-least-length-k-places-away Medium 1549 longest-continuous-subarray-with-absolute-diff-less-than-or-equal-to-limit Medium 1550 find-the-kth-smallest-sum-of-a-matrix-with-sorted-rows Hard 1552 build-an-array-with-stack-operations Easy 1553 count-triplets-that-can-form-two-arrays-of-equal-xor Medium 1554 minimum-time-to-collect-all-apples-in-a-tree Medium 1555 number-of-ways-of-cutting-a-pizza Hard 1556 make-two-arrays-equal-by-reversing-sub-arrays Easy 1557 check-if-a-string-contains-all-binary-codes-of-size-k :memo: Medium 1558 course-schedule-iv Medium 1559 cherry-pickup-ii Hard 1560 number-of-students-doing-homework-at-a-given-time Easy 1561 rearrange-words-in-a-sentence Medium 1562 people-whose-list-of-favorite-companies-is-not-a-subset-of-another-list Medium 1563 maximum-number-of-darts-inside-of-a-circular-dartboard Hard 1566 check-if-a-word-occurs-as-a-prefix-of-any-word-in-a-sentence Easy 1567 maximum-number-of-vowels-in-a-substring-of-given-length Medium 1568 pseudo-palindromic-paths-in-a-binary-tree Medium 1569 max-dot-product-of-two-subsequences Hard 1570 final-prices-with-a-special-discount-in-a-shop Easy 1571 allocate-mailboxes Hard 1572 subrectangle-queries Medium 1573 find-two-non-overlapping-sub-arrays-each-with-target-sum Medium 1574 maximum-product-of-two-elements-in-an-array Easy 1575 maximum-area-of-a-piece-of-cake-after-horizontal-and-vertical-cuts Medium 1576 reorder-routes-to-make-all-paths-lead-to-the-city-zero Medium 1577 probability-of-a-two-boxes-having-the-same-number-of-distinct-balls Hard 1580 shuffle-the-array Easy 1581 the-k-strongest-values-in-an-array Medium 1582 design-browser-history Medium 1583 paint-house-iii Hard 1584 average-salary-excluding-the-minimum-and-maximum-salary Easy 1585 the-kth-factor-of-n Medium 1586 longest-subarray-of-1s-after-deleting-one-element Medium 1587 parallel-courses-ii Hard 1603 running-sum-of-1d-array Easy 1604 least-number-of-unique-integers-after-k-removals Medium 1605 minimum-number-of-days-to-make-m-bouquets Medium 1609 find-all-the-lonely-nodes :lock: Easy 1610 xor-operation-in-an-array Easy 1611 making-file-names-unique Medium 1612 avoid-flood-in-the-city Medium 1613 find-critical-and-pseudo-critical-edges-in-minimum-spanning-tree Hard 1615 range-sum-of-sorted-subarray-sums Medium 1616 minimum-difference-between-largest-and-smallest-value-in-three-moves Medium 1617 stone-game-iv :memo: Hard 1618 delete-n-nodes-after-m-nodes-of-a-linked-list :lock: Easy 1619 path-crossing Easy 1620 check-if-array-pairs-are-divisible-by-k Medium 1621 number-of-subsequences-that-satisfy-the-given-sum-condition Medium 1622 max-value-of-equation Hard 1624 clone-binary-tree-with-random-pointer :lock: Medium 1626 can-make-arithmetic-progression-from-sequence Easy 1627 last-moment-before-all-ants-fall-out-of-a-plank Medium 1628 count-submatrices-with-all-ones Medium 1629 minimum-possible-integer-after-at-most-k-adjacent-swaps-on-digits Hard 1630 count-odd-numbers-in-an-interval-range Easy 1631 number-of-sub-arrays-with-odd-sum Medium 1632 number-of-good-ways-to-split-a-string Medium 1633 minimum-number-of-increments-on-subarrays-to-form-a-target-array Hard 1634 clone-n-ary-tree :lock: Medium 1635 number-of-good-pairs Easy 1636 number-of-substrings-with-only-1s Medium 1637 string-compression-ii Hard 1638 best-position-for-a-service-centre Hard 1640 design-a-file-sharing-system :lock: Medium 1642 water-bottles Easy 1643 number-of-nodes-in-the-sub-tree-with-the-same-label Medium 1644 maximum-number-of-non-overlapping-substrings Hard 1645 find-a-value-of-a-mysterious-function-closest-to-target Hard 1646 kth-missing-positive-number Easy 1647 can-convert-string-in-k-moves Medium 1648 minimum-insertions-to-balance-a-parentheses-string Medium 1649 maximum-number-of-non-overlapping-subarrays-with-sum-equals-target Medium 1650 find-root-of-n-ary-tree :lock: Medium 1651 shuffle-string Easy 1652 bulb-switcher-iv Medium 1653 number-of-good-leaf-nodes-pairs Medium 1655 move-sub-tree-of-n-ary-tree :lock: Hard 1656 count-good-triplets Easy 1657 find-the-winner-of-an-array-game Medium 1658 minimum-swaps-to-arrange-a-binary-grid Medium 1659 get-the-maximum-score Hard 1660 thousand-separator Easy 1661 minimum-number-of-vertices-to-reach-all-nodes Medium 1662 minimum-numbers-of-function-calls-to-make-target-array Medium 1663 detect-cycles-in-2d-grid Hard 1665 diameter-of-n-ary-tree :lock: Medium 1666 make-the-string-great Easy 1667 find-kth-bit-in-nth-binary-string Medium 1668 find-longest-awesome-substring Hard 1669 minimum-cost-to-cut-a-stick Hard 1672 find-the-index-of-the-large-integer :lock: Medium 1674 minimum-operations-to-make-array-equal Medium 1675 magnetic-force-between-two-balls Medium 1676 minimum-number-of-days-to-eat-n-oranges Hard 1677 matrix-diagonal-sum Easy 1678 number-of-ways-to-split-a-string Medium 1679 shortest-subarray-to-be-removed-to-make-array-sorted Medium 1680 count-all-possible-routes Hard 1681 guess-the-majority-in-a-hidden-array :lock: Medium 1682 most-visited-sector-in-a-circular-track Easy 1683 maximum-number-of-coins-you-can-get Medium 1684 find-latest-group-of-size-m Medium 1685 stone-game-v Hard 1687 the-most-similar-path-in-a-graph :lock: Hard 1689 detect-pattern-of-length-m-repeated-k-or-more-times Easy 1690 maximum-length-of-subarray-with-positive-product Medium 1691 minimum-number-of-days-to-disconnect-island Hard 1692 number-of-ways-to-reorder-array-to-get-same-bst Hard 1693 sum-of-all-odd-length-subarrays Easy 1694 make-sum-divisible-by-p Medium 1695 maximum-sum-obtained-of-any-permutation Medium 1696 strange-printer-ii Hard 1697 strings-differ-by-one-character :lock: Medium 1698 replace-all-s-to-avoid-consecutive-repeating-characters Easy 1699 number-of-ways-where-square-of-number-is-equal-to-product-of-two-numbers Medium 1700 minimum-deletion-cost-to-avoid-repeating-letters Medium 1701 remove-max-number-of-edges-to-keep-graph-fully-traversable Hard 1703 put-boxes-into-the-warehouse-i :lock: Medium 1704 special-positions-in-a-binary-matrix Easy 1705 count-unhappy-friends Medium 1706 min-cost-to-connect-all-points Medium 1707 check-if-string-is-transformable-with-substring-sort-operations Hard 1713 dot-product-of-two-sparse-vectors :lock: Medium 1714 rearrange-spaces-between-words Easy 1715 split-a-string-into-the-max-number-of-unique-substrings Medium 1716 maximum-non-negative-product-in-a-matrix Medium 1717 minimum-cost-to-connect-two-groups-of-points Hard 1719 put-boxes-into-the-warehouse-ii :lock: Medium 1720 crawler-log-folder Easy 1721 maximum-profit-of-operating-a-centennial-wheel Medium 1722 throne-inheritance Medium 1723 maximum-number-of-achievable-transfer-requests Hard 1729 binary-search-tree-iterator-ii :lock: Medium 1736 build-binary-expression-tree-from-infix-expression :lock: Medium","categories":[],"tags":[{"name":"Leetcode","slug":"Leetcode","permalink":"http://example.com/tags/Leetcode/"},{"name":"algorithms","slug":"algorithms","permalink":"http://example.com/tags/algorithms/"}]},{"title":"Large Scale Inversion of Subsurface Flow","slug":"2020-10-08-Large-scale-inversion","date":"2020-07-26T05:00:00.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Large-scale-inversion.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Large-scale-inversion.html","excerpt":"","text":"When was this work done?This is a intern project(PCRSI) at Los Alamos National Lab(LANL) summer 2018. My mentor was Dr. Satish Karra and co-author is Dr. Daniel O’Malley. My sincere thanks to them. This project dealt with a typical inversion problem arised in computational geophysics. The goal is to infer the distribution of permeability from observation data of pressure. This project is coded in Fortran and C++(lots of binding), under the framework of PETSc. This code is highlighted by hybrid of MPI and openMP in its FEM solver. Actually PETSc doesn’t support hybridization by then. The scaling was tested on over 2400 cores. PDF verion is listed here and also accessible by this link. Also come with a poster.","categories":[],"tags":[{"name":"inversion","slug":"inversion","permalink":"http://example.com/tags/inversion/"},{"name":"parallel computing","slug":"parallel-computing","permalink":"http://example.com/tags/parallel-computing/"},{"name":"adjoint method","slug":"adjoint-method","permalink":"http://example.com/tags/adjoint-method/"}]},{"title":"Vector fitting for matching microstrip line with cap capacitor","slug":"2020-10-08-Vector-fitting","date":"2020-07-25T05:00:00.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"cem/2020-10-08-Vector-fitting.html","link":"","permalink":"http://example.com/cem/2020-10-08-Vector-fitting.html","excerpt":"This document describes how to generate equivalent circuit model for microstrip line example (Fig 4) in paper Integration of Arbitrary Lumped Multiport Circuit Networks Into the Discontinuous Galerkin Time-Domain Analysis. (A typo in paper: [Ls =0.102nH].","text":"This document describes how to generate equivalent circuit model for microstrip line example (Fig 4) in paper Integration of Arbitrary Lumped Multiport Circuit Networks Into the Discontinuous Galerkin Time-Domain Analysis. (A typo in paper: [Ls =0.102nH]. Step 1. Generate a half microstrip line model, only port 1 to port 2, and run DGTD to obtain the S-parameters. Go to folder forDeliver/halfmatchTL and execute runMPI.sh. The input pulse is set to be 4GHz -12Ghz. This will generate a folder TimeDomainVoltages. Run MATLAB file computeSpara.m, to generate s-parameters. Run for both S11 and S12, then a MATLAB data file halfmatchTL_S11.mat and halfmatchTL_S12.mat will be on disk and then copy them to folder matchMicroStrip. S11: set line 16 S11flag = 1 S12: set line 16 S11flag = 0 Step 2. Run MATLAB file MicroStripEquiv.m. To choose range of data. The vector fitting may NOT work well for very complex y-parameters, so sometimes a range of frequency should be selected. As in datarange = 1:length(freq); , all data is used. To choose order of fitting as you need in line opts.N=4. routine N_PORT_circuit in this script is the working horse. See its own comments. Line 67 is for port 1 to port 2 and line 72 is for port 3 to port 4. Input arguments mean that the node in this circuit starts with lastNd+1; index for RLC(VCVS) starts from lastdev+1; nodes that interface with external circuit starts from port_id_start. Run this file, you will see MATLAB command line prompts the following: Lid1 0 5 -1.056360e-06 Cid1 5 6 -1.583723e-15This is the SPICE netlist of circuit. Copy and paste it to file halfmicrostrip.cir. Always this file starts with .title XXX. Step 3(a)Run python script MicroStripEquiv.py. The library_path should be set correctly according to your installation of PySpice. The installation of PySpice and NgSpice shared library can be found here and here. Note, NgSpice Version 30 is recommended over others. Line 55-59 is the gap capacitor. The input and output stage is connect in serial with a 50Ohm resistor. So the s-parameters from equivalent should be computed as$$S_{11} = \\frac{2V_1-V_s}{V_s}\\S_{21} = \\frac{2V_2}{V_s}$$Then run MATLAB script MicroStripSparaCircuit.m, you will see the results as: Step 3(b) Since the lump port is not exactly the same as wave port where the equivalent circuit model is obtained from. So change the $Y_{22}$ to 0.02G at port 2 and port 3 by turning on Modflag in line Modflag=1 in file MicroStripEquiv.m. Then go the process stated in step 3(a) you will see. Files included: Folder forDelivery contains the DGTD solver in dgtd_MPI, geometry files in geo and all necessary file to obtain the s-parameter in folder halfmatchTL. To start,go to halfmatchTL and execute runMPI.sh. In folder circuitfittingProject, there includes necessary MATLAB and python files. Each file should be commented well. For any question, please contact &#x73;&#104;&#x75;&#119;&#x61;&#110;&#x67;&#49;&#50;&#x40;&#117;&#x6e;&#x6d;&#x2e;&#101;&#x64;&#x75;.","categories":[{"name":"cem","slug":"cem","permalink":"http://example.com/categories/cem/"}],"tags":[{"name":"cem","slug":"cem","permalink":"http://example.com/tags/cem/"}]},{"title":"博客模板功能介绍","slug":"2020-07-11-blog_info","date":"2020-07-11T05:00:00.000Z","updated":"2020-07-13T09:45:27.000Z","comments":true,"path":"uncategorized/2020-07-11-blog_info.html","link":"","permalink":"http://example.com/uncategorized/2020-07-11-blog_info.html","excerpt":"","text":"在此之前我有写过一篇如何使用我博客模板的文章 请先看这篇基础集成，这篇文章主要讲的是如何使用和修改我的博客主题，文章内容含以下几点： 博客特性 适配电脑、手机、平板等各屏幕 响应式设计 个性化头像 每篇文章自动添加打赏功能 支持Disqus、livere评论系统 支持站点总数访问统计，每篇文章访问统计 支持文章自动生成目录 支持标签分类 支持代码高亮 支持文章H1、H2、H3、H4标题样式多样化 支持多种三方社交icon展示，能从博客直接跳转到自己的三方社交主页 支持三方社交分享(facebook、twitter) 博客主要模块介绍_config.yml_config.yml 是博客的配置文件，整个站点的信息都在这修改，想要把我的模板改成你自己的也需要修改_config.yml 重要字段说明 enableToc: 是否开启文章自动生成目录，设置为false文章不会自动生成目录 comment/livere: livere评论系统，支持微信、qq、微博、豆瓣、twitter等登录后可以直接评论 comment/disqus: disqus评论系统，支持facebook、twitter等登录后可以直接评论 social/weibo、github、zhihu、jianshu等: 个人站底部展示的微博等三方社交按钮，点击后直接跳转到个人微博或其他社交主页 baidu/id: 百度统计，用来统计你个人站点的用户访问情况 ga/id: google统计，用来统计你个人站点的用户访问情况 _config.yml 文件除以上字段还有一些可以自行修改，例如title之类的字段 _posts_posts 目录是用来存放文章的目录，写新文章，直接放在这个目录即可 使用博客模板时，请把博客自带的文章给去掉，如果想使用博客自带的文章请 注明出处。 自定义页面about.md、support.md 等为自定义页面，如果你想添加自动以页面可以直接复制about.md 文件修改文件名和里面的内容即可。 如果需要在导航显示你新增的页面，直接在_config.yml 文件的nav字段中添加你新页面配置即可 修改说明如果要修改博客模板信息建议只修改_config.yml 文件内容和 _posts 里面的文章信息。因为博客模板一直在更新迭代，改动多了以免你后期更新博客模板的时候不方便。 如果你想改动模板的样式又想继续更新迭代博客模板，你可以提交在github上提交pull request 或者直接给我发邮件建议改成什么样，如果你的提议确实可以，我会采纳的，并且非常感谢你的建议。 博客迭代信息请看ReleaseNode 遇到解决不了的问题可以找 技术支持","categories":[],"tags":[{"name":"jekyll","slug":"jekyll","permalink":"http://example.com/tags/jekyll/"}]},{"title":"博客迭代记录","slug":"2020-07-10-ReleaseNode","date":"2020-07-10T05:00:00.000Z","updated":"2020-07-13T09:45:27.000Z","comments":true,"path":"uncategorized/2020-07-10-ReleaseNode.html","link":"","permalink":"http://example.com/uncategorized/2020-07-10-ReleaseNode.html","excerpt":"","text":"介绍本博客首发时间为2015年，至今已经5个年头了。 感觉之前更新迭代的有点乱，很多用户在使用的时候也没法确定是否要更新新版的博客，再次我专门用一篇文章来记录博客更新迭代的记录，如果你已经在使用我的博客模板的，你可以看看更新记录后确认下是否要更新。 博客的全功能介绍请看博客功能介绍 1.0.02016-11-25 第一版发布，红色主题 2.0.0 开发中 2016-11-25 修改博客风格为淡蓝色主题 2016-12-16 增长404、about等页面 2017-1-12 增加代码高亮 2017-3-19 增加打赏公共 2017-9-8 多说评论系统停服，切换到disqus评论（多说上的评论全没了😭） 2019-1-25 增加博客底部社交链接 2020-7-8 博客域名从 http://baixin.io 迁移到 https://leopardpan.cn （baixin.io没法备案之前的统计也全没了😭）. 2020-7-13 增加文章自动生成目录功能, 增加livere评论系统 博客更新手册如果你已经在使我的博客模板了，现在又想继续更新新版的博客，你下载博客后只需要修改两个各方 _config.yml 文件 _posts 目录 _config.yml 文件里面的内容设置成你自己的，也可以用你原来的，最好是更新版的字段做一下对比。 _posts 目录里面的文章全部删掉，把你自己的文章放进来 修改以上两个地方新版的博客便更新完成，快看看效果吧！","categories":[],"tags":[{"name":"jekyll","slug":"jekyll","permalink":"http://example.com/tags/jekyll/"}]},{"title":"Markdown syntax supported by the document","slug":"2020-10-08-Markdown-tool","date":"2017-11-20T06:00:00.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-Markdown-tool.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-Markdown-tool.html","excerpt":"","text":"What is Markdown?What Is It?Markdown is a plain text formatting syntax aimed at making writing for the internet easier. The philosophy behind Markdown is that plain text documents should be readable without tags mussing everything up, but there should still be ways to add text modifiers like lists, bold, italics, etc. It is an alternative to WYSIWYG (what you see is what you get) editors, which use rich text that later gets converted to proper HTML. It’s possible you’ve encountered Markdown without realizing it. Facebook chat, Skype, and Reddit all let you use different flavors of Markdown to format your messages. Here’s a quick example: to make words bold using Markdown, you simply enclose them in * (asterisks). So, bold word would look like bold word when everything is said and done. All told, Markdown is a great way to write for the web using plain text. Basic grammersTitleH1 :# Header 1H2 :## Header 2H3 :### Header 3H4 :#### Header 4H5 :##### Header 5H6 :###### Header 6Link :TitleBold :BoldItalics :Italics*strikebreak :textinlines : alert(&#39;Hello World&#39;); List list1 list2 list3 list reference list1 list2 list3 Advanced syntax1. Todo list support for exporting the text in PDF format Improving the Cmd rendering algorithm to improve rendering efficiency using local rendering techniques New Todo List Feature Fix Icon function2. Highliget a snippet of code 123456789@requires_authorizationclass SomeClass: passif __name__ == &#x27;__main__&#x27;: # A comment print &#x27;hello world&#x27; 3. Table item price quantity computer $1600 5 cellphone $12 12 cable $1 234","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"Introduction to Hexo","slug":"2017-10-08-Introduction-to-hexo","date":"2017-10-02T05:00:00.000Z","updated":"2020-10-18T15:19:31.917Z","comments":true,"path":"uncategorized/2017-10-08-Introduction-to-hexo.html","link":"","permalink":"http://example.com/uncategorized/2017-10-08-Introduction-to-hexo.html","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]},{"title":"文档支持的Markdown语法","slug":"2016-11-20-markdownTool","date":"2016-11-20T06:00:00.000Z","updated":"2020-07-13T09:45:27.000Z","comments":true,"path":"uncategorized/2016-11-20-markdownTool.html","link":"","permalink":"http://example.com/uncategorized/2016-11-20-markdownTool.html","excerpt":"","text":"什么是 MarkdownMarkdown 是一种方便记忆、书写的纯文本标记语言，用户可以使用这些标记符号以最小的输入代价生成极富表现力的文档：如您正在阅读的这篇文章。它使用简单的符号标记不同的标题，分割不同的段落，粗体 或者 斜体 某些文字. 很多产品的文档也是用markdown编写的，并且以“README.MD”的文件名保存在软件的目录下面。 一些基本语法标题H1 :# Header 1H2 :## Header 2H3 :### Header 3H4 :#### Header 4H5 :##### Header 5H6 :###### Header 6链接 :Title加粗 :Bold斜体字 :Italics*删除线 :text内嵌代码 : alert(&#39;Hello World&#39;); 列表 列表1 列表2 列表3 列表引用 列表1 列表2 列表3 插入一张图片打赏一个吧 css 的大部分语法同样可以在 markdown 上使用，但不同的渲染器渲染出来的 markdown 内容样式也不一样，下面这些链接里面有 markdown 基本语法，你也可以在下面几个平台上尝试着写一些。 博客支持的高级语法1. 制作一份待办事宜 支持以 PDF 格式导出文稿 改进 Cmd 渲染算法，使用局部渲染技术提高渲染效率 新增 Todo 列表功能 修复 图标功能 2. 高亮一段代码123456789@requires_authorizationclass SomeClass: passif __name__ == &#x27;__main__&#x27;: # A comment print &#x27;hello world&#x27; 3. 绘制表格 项目 价格 数量 计算机 $1600 5 手机 $12 12 管线 $1 234","categories":[],"tags":[{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"}]},{"title":"Jekyll搭建个人博客","slug":"2016-10-14-jekyll_tutorials1","date":"2016-10-14T05:00:00.000Z","updated":"2020-07-13T09:45:27.000Z","comments":true,"path":"uncategorized/2016-10-14-jekyll_tutorials1.html","link":"","permalink":"http://example.com/uncategorized/2016-10-14-jekyll_tutorials1.html","excerpt":"","text":"之前写了一篇HEXO搭建个人博客的教程获得了很好评，尤其是在简书上目前已经累积了10W+的阅读量了，也有好心的读者主动给我打赏，在此感谢。 如果你看过我的文章会发现我现在的博客样式跟之前是有很大的区别的，之前我也是使用 HEXO 搭建的博客，后来发现使用 HEXO 在多台电脑上发布博客，操作起来并不是那么方便，果断就转到了 Jekyll 上，接下来我会讲如何使用 Jekyll 搭建博客，博客模板效果。 介绍 Jekyll 是一个简单的博客形态的静态站点生产机器。它有一个模版目录，其中包含原始文本格式的文档，通过 Markdown （或者 Textile） 以及 Liquid 转化成一个完整的可发布的静态网站，你可以发布在任何你喜爱的服务器上。Jekyll 也可以运行在 GitHub Page 上，也就是说，你可以使用 GitHub 的服务来搭建你的项目页面、博客或者网站，而且是完全免费的 使用 Jekyll 搭建博客之前要确认下本机环境，Git 环境（用于部署到远端）、Ruby 环境（Jekyll 是基于 Ruby 开发的）、包管理器 RubyGems 如果你是 Mac 用户，你就需要安装 Xcode 和 Command-Line Tools了。下载方式 Preferences → Downloads → Components。 Jekyll 是一个免费的简单静态网页生成工具，可以配合第三方服务例如： Disqus（评论）、多说(评论) 以及分享 等等扩展功能，Jekyll 可以直接部署在 Github（国外） 或 Coding（国内） 上，可以绑定自己的域名。Jekyll中文文档、Jekyll英文文档、Jekyll主题列表。 Jekyll 环境配置安装 jekyll 1234567891011$ gem install jekyll &#96;&#96;&#96; 创建博客&#96;&#96;&#96; $ jekyll new myBlog &#96;&#96;&#96; 进入博客目录 $ cd myBlog 123启动本地服务 $ jekyll serve 12345678910111213在浏览器里输入： [http:&#x2F;&#x2F;localhost:4000](http:&#x2F;&#x2F;localhost:4000)，就可以看到你的博客效果了。![](&#x2F;images&#x2F;posts&#x2F;jekyll&#x2F;image1.png)so easy !### 目录结构 Jekyll 的核心其实是一个文本转换引擎。它的概念其实就是： 你用你最喜欢的标记语言来写文章，可以是 Markdown，也可以是 Textile,或者就是简单的 HTML, 然后 Jekyll 就会帮你套入一个或一系列的布局中。在整个过程中你可以设置URL路径, 你的文本在布局中的显示样式等等。这些都可以通过纯文本编辑来实现，最终生成的静态页面就是你的成品了。 一个基本的 Jekyll 网站的目录结构一般是像这样的： .├── _config.yml├── _includes| ├── footer.html| └── header.html├── _layouts| ├── default.html| ├── post.html| └── page.html├── _posts| └── 2016-10-08-welcome-to-jekyll.markdown├── _sass| ├── _base.scss| ├── _layout.scss| └── _syntax-highlighting.scss├── about.md├── css| └── main.scss├── feed.xml└── index.html 123456789101112131415161718这些目录结构以及具体的作用可以参考 [官网文档](http:&#x2F;&#x2F;jekyll.com.cn&#x2F;docs&#x2F;structure&#x2F;) 进入 _config.yml 里面，修改成你想看到的信息，重新 jekyll server ，刷新浏览器就可以看到你刚刚修改的信息了。到此，博客初步搭建算是完成了，### 博客部署到远端 我这里讲的是部署到 Github Page 创建一个 github 账号，然后创建一个跟你账户名一样的仓库，如我的 github 账户名叫 [leopardpan](https:&#x2F;&#x2F;github.com&#x2F;leopardpan)，我的 github 仓库名就叫 [leopardpan.github.io](https:&#x2F;&#x2F;github.com&#x2F;leopardpan&#x2F;leopardpan.github.io)，创建好了之后，把刚才建立的 myBlog 项目 push 到 username.github.io仓库里去（username指的是你的github用户名），检查你远端仓库已经跟你本地 myBlog 同步了，然后你在浏览器里输入 username.github.io ，就可以访问你的博客了。### 编写文章 所有的文章都是 _posts 目录下面，文章格式为 mardown 格式，文章文件名可以是 .mardown 或者 .md。 编写一篇新文章很简单，你可以直接从 _posts&#x2F; 目录下复制一份出来 &#96;2016-10-16-welcome-to-jekyll副本.markdown&#96; ，修改名字为 2016-10-16-article1.markdown ，注意：文章名的格式前面必须为 2016-10-16- ，日期可以修改，但必须为 年-月-日- 格式，后面的 article1 是整个文章的连接 URL，如果文章名为中文，那么文章的连接URL就会变成这样的：http:&#x2F;&#x2F;leopardpan.cn&#x2F;2015&#x2F;08&#x2F;%E6%90%AD%E5&#x2F; ， 所以建议文章名最好是英文的或者阿拉伯数字。 双击 2016-10-16-article1.markdown 打开 layout: posttitle: “Welcome to Jekyll!”date: 2016-10-16 11:29:08 +0800categories: jekyll update 正文… 1234567891011121314151617title: 显示的文章名， 如：title: 我的第一篇文章 date: 显示的文章发布日期，如：date: 2016-10-16 categories: tag标签的分类，如：categories: 随笔 注意：文章头部格式必须为上面的，.... 就是文章的正文内容。我写文章使用的是 Sublime Text2 编辑器，如果你对 markdown 语法不熟悉的话，可以看看[作业部落的教程](https:&#x2F;&#x2F;www.zybuluo.com&#x2F;) ### 使用我的博客模板虽然博客部署完成了，你会发现博客太简单不是你想要的，如果你喜欢我的模板的话，可以使用我的模板。首先你要获取的我博客，[Github项目地址](https:&#x2F;&#x2F;github.com&#x2F;leopardpan&#x2F;leopardpan.github.io.git)，你可以直接[点击下载博客](https:&#x2F;&#x2F;github.com&#x2F;leopardpan&#x2F;leopardpan.github.io&#x2F;archive&#x2F;master.zip)，进去leopardpan.github.io&#x2F; 目录下， 使用命令部署本地服务 $ jekyll server 123### 如果你本机没配置过任何jekyll的环境，可能会报错 /Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in require&#39;: cannot load such file -- bundler (LoadError) from /Users/xxxxxxxx/.rvm/rubies/ruby-2.2.2/lib/ruby/site_ruby/2.2.0/rubygems/core_ext/kernel_require.rb:54:in require’ from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/lib/jekyll/plugin_manager.rb:34:in require_from_bundler&#39; from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/gems/jekyll-3.3.0/exe/jekyll:9:in &lt;top (required)&gt;’ from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in load&#39; from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/jekyll:23:in ‘ from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in eval&#39; from /Users/xxxxxxxx/.rvm/gems/ruby-2.2.2/bin/ruby_executable_hooks:15:in ‘ 123原因： 没有安装 bundler ，执行安装 bundler 命令 $ gem install bundler 1234提示： Fetching: bundler-1.13.5.gem (100%)Successfully installed bundler-1.13.5Parsing documentation for bundler-1.13.5Installing ri documentation for bundler-1.13.5Done installing documentation for bundler after 5 seconds1 gem installed 123再次执行 $ jekyll server ，提示 Could not find proper version of jekyll (3.1.1) in any of the sourcesRun bundle install to install missing gems. 123跟着提示运行命令 $ bundle install 12345这个时候你可能会发现 bundle install 运行卡主不动了。如果很长时间都没任何提示的话，你可以尝试修改 gem 的 source $ gem sources –remove https://rubygems.org/$ gem sources -a http://ruby.taobao.org/$ gem sources -l* CURRENT SOURCES * http://ruby.taobao.org 123再次执行命令 $ bundle install，发现开始有动静了 Fetching gem metadata from https://rubygems.org/………..Fetching version metadata from https://rubygems.org/..Fetching dependency metadata from https://rubygems.org/.。。。Installing jekyll-watch 1.3.1Installing jekyll 3.1.1Bundle complete! 3 Gemfile dependencies, 17 gems now installed.Use bundle show [gemname] to see where a bundled gem is installed. 123bundler安装完成，后再次启动本地服务 $ jekyll server 123继续报错 Configuration file: /Users/tendcloud-Caroline/Desktop/leopardpan.github.io/_config.yml Dependency Error: Yikes! It looks like you don’t have jekyll-sitemap or one of its dependencies installed. In order to use Jekyll as currently configured, you’ll need to install this gem. The full error message from Ruby is: ‘cannot load such file – jekyll-sitemap’ If you run into trouble, you can find helpful resources at http://jekyllrb.com/help/!jekyll 3.1.1 | Error: jekyll-sitemap 12345678910表示 当前的 jekyll 版本是 3.1.1 ，无法使用 jekyll-sitemap 解决方法有两个&gt; 1、打开当前目录下的 _config.yml 文件，把 gems: [jekyll-paginate,jekyll-sitemap] 换成 gems: [jekyll-paginate] ，也就是去掉jekyll-sitemap。&gt; 2、升级 jekyll 版本，我当前的是 jekyll 3.1.2 。修改完成后保存配置，再次执行 $ jekyll server 12提示 Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml Source: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github Destination: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_site Incremental build: disabled. Enable with –incremental Generating… done in 0.901 seconds. Auto-regeneration: enabled for ‘/Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github’Configuration file: /Users/baixinpan/Desktop/OpenSource/Mine/Page-Blog/leopardpan.github.io-github/_config.yml Server address: http://127.0.0.1:4000/ Server running… press ctrl-c to stop. 表示本地服务部署成功。 在浏览器输入 [127.0.0.1:4000](127.0.0.1:4000) ， 就可以看到[leopardpan.cn](http://leopardpan.cn)博客效果了。 ### 修改成你自己的博客 &gt;* 如果你想使用我的模板请把 _posts/ 目录下的文章都去掉。 &gt;* 修改 _config.yml 文件里面的内容为你自己的。 然后使用 git push 到你自己的仓库里面去，检查你远端仓库，在浏览器输入 username.github.io 就会发现，你有一个漂亮的主题模板了。 ### 为什么要是用 Jekyll 使用了 Jekyll 你会发现如果你想使用多台电脑发博客都很方便，只要把远端 github 仓库里的博客 clone 下来，写文章后再提交就可以了，Hexo 由于远端提交的是静态网页，所有无法直接写 Markdown 的文章。如果你想看 Hexo 搭建博客，可以看看我的另一篇[HEXO搭建个人博客](http://leopardpan.cn/2015/08/HEXO%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/)的教程。 如果你在搭建博客遇到问题，可以在[原文博客](http://leopardpan.cn/2016/10/jekyll_tutorials1/)的评论里给我提问。 后面会继续介绍，在我的博客基础上，如何修改成你自己喜欢的 Style，欢迎继续关注我博客的更新。 ### Q&amp;A &gt; 问题：最近很多朋友使用我的模板报警告：The CNAME `leopardpan.cn` is already taken &gt; 解决：把CNAME里面的baixin.io修改成你自己的域名，如果你暂时没有域名，CNAME里面就什么都不用谢。（之前没人反馈过这个问题，应该是github page最近才最的限制。）","categories":[],"tags":[{"name":"jekyll","slug":"jekyll","permalink":"http://example.com/tags/jekyll/"}]},{"title":"HEXO搭建个人博客","slug":"2020-10-08-HEXO-for-beginers","date":"2015-08-25T05:00:00.000Z","updated":"2020-10-09T04:48:41.000Z","comments":true,"path":"uncategorized/2020-10-08-HEXO-for-beginers.html","link":"","permalink":"http://example.com/uncategorized/2020-10-08-HEXO-for-beginers.html","excerpt":"","text":"经过各种找资料，踩过各种坑，终于使用 hexo 搭建个人博客初步完成了，域名目前用得时 github 的，我的 hexo 是 3.1.1 版本，hexo 不同的版本，很多配置都不一样。好吧，废话不多说了，开始吧。 本篇文章累计了大量评论，和我的一些解答，读者有什么问题可以先看看评论，或者搜下关键字，如果还是有问题可以给我在评论里给我留言，问题很着急的可以加我 ＱＱ：1499065178 ，或者给我发邮件：leopardpan@icloud.com ，都可以，如果你已经搭建完成了，可以看看我的另一篇博客HEXO进阶，有讲如何能百度搜索你的博客、多台电脑使用HEXO发布博客等。我现在的博客是使用 Jekyll 搭建的，如果你想使用我现在的模板请看Jekyll搭建个人博客 背景 这篇教程是针对与Mac的，参考链接，由于原文讲到的hexo是以前的老版本，所以现在的版本配置的时候会有些改动。 之前是想着写博客，一方面是给自己做笔记，可以提升自己的写作、总结能力，一个技术点我们会使用，并不难，但是要做到让让别人也能听懂我们讲得，还是需要一定的技巧和经验的。很多类似于CSDN、博客园也都可以写文章，但是页面的样式我，不是太喜欢，简书还算好点得。最近看到一些大神们的博客（在我的友情链接里有），貌似都是用hexo写得，我也依葫芦画瓢的搭建了一个。不罗嗦了，直接上搭建步骤。 配置环境安装Node（必须）作用：用来生成静态页面的到Node.js官网下载相应平台的最新版本，一路安装即可。 安装Git（必须）作用：把本地的hexo内容提交到github上去.安装Xcode就自带有Git，我就不多说了。 申请GitHub（必须）作用：是用来做博客的远程创库、域名、服务器之类的，怎么与本地hexo建立连接等下讲。github账号我也不再啰嗦了,没有的话直接申请就行了，跟一般的注册账号差不多，SSH Keys，看你自己了，可以不配制，不配置的话以后每次对自己的博客有改动提交的时候就要手动输入账号密码，配置了就不需要了，怎么配置我就不多说了，网上有很多教程。 正式安装HEXONode和Git都安装好后，可执行如下命令安装hexo： $ sudo npm install -g hexo 初始化创建一个文件夹，如：Blog，cd到Blog里执行hexo init的。命令： hexo init 好啦，至此，全部安装工作已经完成！ 生成静态页面继续再Blog目录下执行如下命令，生成静态页面 hexo generate （hexo g 也可以） 本地启动启动本地服务，进行文章预览调试，命令： hexo server 浏览器输入http://localhost:4000我不知道你们能不能，反正我不能，因为我还有环境没配置好 常见的HEXO配置错误：123456ERROR Plugin load failed: hexo-server原因： Besides, utilities are separated into a standalone module. hexo.util is not reachable anymore.解决方法，执行命令：$ sudo npm install hexo-server 1234567891011执行命令hexo server，提示：Usage: hexo&lt;Command&gt; ....原因：我认为是没有生成本地服务解决方法，执行命令：$ npm install hexo-server --save提示：hexo-server@0.1.2 node_modules&#x2F;hexo-server.... 表示成功了[参考](https:&#x2F;&#x2F;hexo.io&#x2F;zh-cn&#x2F;docs&#x2F;server.html) 这个时候再执行：$ hexo-server 得到: INFO Hexo is running at http://0.0.0.0:4000/. Press Ctrl+C to stop. 这个时候再点击http://0.0.0.0:4000，正常情况下应该是最原始的画面，但是我看到的是：白板和Cannot GET / 几个字原因： 由于2.6以后就更新了，我们需要手动配置些东西，我们需要输入下面三行命令： npm install hexo-renderer-ejs --save npm install hexo-renderer-stylus --save npm install hexo-renderer-marked --save 这个时候再重新生成静态文件，命令： hexo generate （或hexo g） 启动本地服务器： hexo server （或hexo s） 再点击网址http://0.0.0.0:4000 OK终于可以看到属于你自己的blog啦，?，虽然很简陋，但好歹有了一个属于自己的小窝了。参考链接，本地已经简单的设置好了，但是现在域名和服务器都是基于自己的电脑，接下来需要跟github进行关联。 配置Github建立Repository建立与你用户名对应的仓库，仓库名必须为【your_user_name.github.io】，固定写法然后建立关联，我的Blog在本地/Users/leopard/Blog，Blog是我之前建的东西也全在这里面，有： Blog ｜ ｜－－ _config.yml ｜－－ node_modules ｜－－ public ｜－－ source ｜－－ db.json ｜－－ package.json ｜－－ scaffolds ｜－－ themes 现在我们需要_config.yml文件，来建立关联，命令： vim _config.yml 翻到最下面，改成我这样子的，注意： : 后面要有空格 deploy: type: git repository: https://github.com/leopardpan/leopardpan.github.io.git branch: master 执行如下命令才能使用git部署 npm install hexo-deployer-git --save 网上会有很多说法，有的type是github, 还有repository 最后面的后缀也不一样，是github.com.git，我也踩了很多坑，我现在的版本是hexo: 3.1.1，执行命令hexo -vsersion就出来了,貌似3.0后全部改成我上面这种格式了。忘了说了，我没用SSH Keys如果你用了SSH Keys的话直接在github里复制SSH的就行了，总共就两种协议，相信你懂的。然后，执行配置命令： hexo deploy 然后再浏览器中输入http://leopardpan.github.io/就行了，我的 github 的账户叫 leopardpan ,把这个改成你 github 的账户名就行了 部署步骤每次部署的步骤，可按以下三步来进行。 hexo clean hexo generate hexo deploy 一些常用命令： hexo new &quot;postName&quot; #新建文章 hexo new page &quot;pageName&quot; #新建页面 hexo generate #生成静态页面至public目录 hexo server #开启预览访问端口（默认端口4000，&#39;ctrl + c&#39;关闭server） hexo deploy #将.deploy目录部署到GitHub hexo help #查看帮助 hexo version #查看Hexo的版本 这里有大量的主题列表使用方法里面都有详细的介绍，我就不多说了。我这里有几款个人认为不错的主题，免去你们，一个一个的选了，欢迎吐槽我的审美，? Cover - A chic theme with facebook-like cover photo Oishi - A white theme based on Landscape plus and Writing. Sidebar - Another theme based on Light with a simple sidebar TKL - A responsive design theme for Hexo. 一个设计优雅的响应式主题 Tinnypp - A clean, simple theme based on Tinny Writing - A small and simple hexo theme based on Light Yilia - Responsive and simple style 优雅简洁响应式主题，我用得就是这个。 Pacman voidy - A theme with dynamic tagcloud and dynamic snow 博客目录介绍 文章在 source/_posts，编辑器可以用 Sublime，支持 markdown 语法。如果想修改头像可以直接在主题的 _config.yml 文件里面修改，友情链接，之类的都在这里，修改名字在 public/index.html 里修改，开始打理你的博客吧，有什么问题或者建议，都可以提出来，我会继续完善的。 Markdown语法参考链接: 作业部落 Q&amp;A 问：如何让文章想只显示一部分和一个 阅读全文 的按钮？答：在文章中加一个 &lt;!--more--&gt; ， &lt;!--more--&gt; 后面的内容就不会显示出来了。 问：本地部署成功了，也能预览效果，但使用 username.github.io 访问，出现 404 .答：首先确认 hexo d 命令执行是否报错，如果没有报错，再查看一下你的 github 的 username.github.io 仓库，你的博客是否已经成功提交了，你的 github 邮箱也要通过验证才行。 转载请注明原地址，潘柏信的博客：http://leopardpan.github.io 谢谢！","categories":[],"tags":[{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"}]}],"categories":[{"name":"programming","slug":"programming","permalink":"http://example.com/categories/programming/"},{"name":"GPU","slug":"GPU","permalink":"http://example.com/categories/GPU/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://example.com/categories/Deep-Learning/"},{"name":"Math","slug":"Math","permalink":"http://example.com/categories/Math/"},{"name":"Machine Learning","slug":"Machine-Learning","permalink":"http://example.com/categories/Machine-Learning/"},{"name":"cem","slug":"cem","permalink":"http://example.com/categories/cem/"}],"tags":[{"name":"c++","slug":"c","permalink":"http://example.com/tags/c/"},{"name":"parallel computing","slug":"parallel-computing","permalink":"http://example.com/tags/parallel-computing/"},{"name":"hexo","slug":"hexo","permalink":"http://example.com/tags/hexo/"},{"name":"Randomness","slug":"Randomness","permalink":"http://example.com/tags/Randomness/"},{"name":"Determinism","slug":"Determinism","permalink":"http://example.com/tags/Determinism/"},{"name":"Tensorflow","slug":"Tensorflow","permalink":"http://example.com/tags/Tensorflow/"},{"name":"Deep Learning","slug":"Deep-Learning","permalink":"http://example.com/tags/Deep-Learning/"},{"name":"eager execution","slug":"eager-execution","permalink":"http://example.com/tags/eager-execution/"},{"name":"docker","slug":"docker","permalink":"http://example.com/tags/docker/"},{"name":"domain-Decomposition","slug":"domain-Decomposition","permalink":"http://example.com/tags/domain-Decomposition/"},{"name":"ParaReal","slug":"ParaReal","permalink":"http://example.com/tags/ParaReal/"},{"name":"PIT","slug":"PIT","permalink":"http://example.com/tags/PIT/"},{"name":"roofline model","slug":"roofline-model","permalink":"http://example.com/tags/roofline-model/"},{"name":"machine learning","slug":"machine-learning","permalink":"http://example.com/tags/machine-learning/"},{"name":"HMM","slug":"HMM","permalink":"http://example.com/tags/HMM/"},{"name":"SVM","slug":"SVM","permalink":"http://example.com/tags/SVM/"},{"name":"PCA","slug":"PCA","permalink":"http://example.com/tags/PCA/"},{"name":"ICA","slug":"ICA","permalink":"http://example.com/tags/ICA/"},{"name":"GMM","slug":"GMM","permalink":"http://example.com/tags/GMM/"},{"name":"EM","slug":"EM","permalink":"http://example.com/tags/EM/"},{"name":"convex optimization","slug":"convex-optimization","permalink":"http://example.com/tags/convex-optimization/"},{"name":"beamforming","slug":"beamforming","permalink":"http://example.com/tags/beamforming/"},{"name":"SOCP","slug":"SOCP","permalink":"http://example.com/tags/SOCP/"},{"name":"least-square","slug":"least-square","permalink":"http://example.com/tags/least-square/"},{"name":"finite element method","slug":"finite-element-method","permalink":"http://example.com/tags/finite-element-method/"},{"name":"markdown","slug":"markdown","permalink":"http://example.com/tags/markdown/"},{"name":"Hexo","slug":"Hexo","permalink":"http://example.com/tags/Hexo/"},{"name":"git","slug":"git","permalink":"http://example.com/tags/git/"},{"name":"Floating-point","slug":"Floating-point","permalink":"http://example.com/tags/Floating-point/"},{"name":"Leetcode","slug":"Leetcode","permalink":"http://example.com/tags/Leetcode/"},{"name":"algorithms","slug":"algorithms","permalink":"http://example.com/tags/algorithms/"},{"name":"inversion","slug":"inversion","permalink":"http://example.com/tags/inversion/"},{"name":"adjoint method","slug":"adjoint-method","permalink":"http://example.com/tags/adjoint-method/"},{"name":"cem","slug":"cem","permalink":"http://example.com/tags/cem/"},{"name":"jekyll","slug":"jekyll","permalink":"http://example.com/tags/jekyll/"}]}